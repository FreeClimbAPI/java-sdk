/*
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.freeclimbapi;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.concurrent.Callable;

/**
 * UpdateConferenceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-31T13:04:20.214-05:00[America/Chicago]")
public class UpdateConferenceRequest {
  public static final String SERIALIZED_NAME_ALIAS = "alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  private String alias;

  /**
   * Controls when a beep is played. Valid values: &#x60;always&#x60;, &#x60;never&#x60;, &#x60;entryOnly&#x60;, &#x60;exitOnly&#x60;.
   */
  @JsonAdapter(PlayBeepEnum.Adapter.class)
  public enum PlayBeepEnum {
    ALWAYS("always"),
    
    NEVER("never"),
    
    ENTRY_ONLY("entryOnly"),
    
    EXIT_ONLY("exitOnly");

    private String value;

    PlayBeepEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlayBeepEnum fromValue(String value) {
      for (PlayBeepEnum b : PlayBeepEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlayBeepEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlayBeepEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlayBeepEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlayBeepEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PLAY_BEEP = "playBeep";
  @SerializedName(SERIALIZED_NAME_PLAY_BEEP)
  private PlayBeepEnum playBeep = PlayBeepEnum.ALWAYS;

  /**
   * New status of the conference. Valid values: &#x60;empty&#x60; or &#x60;terminated&#x60;. For more information, see **Status Parameter** below.**
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    EMPTY("empty"),
    
    TERMINATED("terminated");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public UpdateConferenceRequest() { 
  }

  public UpdateConferenceRequest alias(String alias) {
    
    this.alias = alias;
    return this;
  }

   /**
   * Description for this conference. Maximum 64 characters.
   * @return alias
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description for this conference. Maximum 64 characters.")

  public String getAlias() {
    return alias;
  }


  public void setAlias(String alias) {
    this.alias = alias;
  }


  public UpdateConferenceRequest playBeep(PlayBeepEnum playBeep) {
    
    this.playBeep = playBeep;
    return this;
  }

   /**
   * Controls when a beep is played. Valid values: &#x60;always&#x60;, &#x60;never&#x60;, &#x60;entryOnly&#x60;, &#x60;exitOnly&#x60;.
   * @return playBeep
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Controls when a beep is played. Valid values: `always`, `never`, `entryOnly`, `exitOnly`.")

  public PlayBeepEnum getPlayBeep() {
    return playBeep;
  }


  public void setPlayBeep(PlayBeepEnum playBeep) {
    this.playBeep = playBeep;
  }


  public UpdateConferenceRequest status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * New status of the conference. Valid values: &#x60;empty&#x60; or &#x60;terminated&#x60;. For more information, see **Status Parameter** below.**
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "New status of the conference. Valid values: `empty` or `terminated`. For more information, see **Status Parameter** below.**")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateConferenceRequest updateConferenceRequest = (UpdateConferenceRequest) o;
    return Objects.equals(this.alias, updateConferenceRequest.alias) &&
        Objects.equals(this.playBeep, updateConferenceRequest.playBeep) &&
        Objects.equals(this.status, updateConferenceRequest.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alias, playBeep, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateConferenceRequest {\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    playBeep: ").append(toIndentedString(playBeep)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

