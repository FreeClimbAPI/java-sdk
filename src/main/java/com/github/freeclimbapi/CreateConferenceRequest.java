/*
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.freeclimbapi;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.concurrent.Callable;

/**
 * CreateConferenceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-31T13:04:20.214-05:00[America/Chicago]")
public class CreateConferenceRequest {
  public static final String SERIALIZED_NAME_ALIAS = "alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  private String alias;

  /**
   * Controls when a beep is played. Valid values: &#x60;always&#x60;, &#x60;never&#x60;, &#x60;entryOnly&#x60;, &#x60;exitOnly&#x60;.
   */
  @JsonAdapter(PlayBeepEnum.Adapter.class)
  public enum PlayBeepEnum {
    ALWAYS("always"),
    
    NEVER("never"),
    
    ENTRY_ONLY("entryOnly"),
    
    EXIT_ONLY("exitOnly");

    private String value;

    PlayBeepEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlayBeepEnum fromValue(String value) {
      for (PlayBeepEnum b : PlayBeepEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlayBeepEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlayBeepEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlayBeepEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlayBeepEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PLAY_BEEP = "playBeep";
  @SerializedName(SERIALIZED_NAME_PLAY_BEEP)
  private PlayBeepEnum playBeep = PlayBeepEnum.ALWAYS;

  public static final String SERIALIZED_NAME_RECORD = "record";
  @SerializedName(SERIALIZED_NAME_RECORD)
  private Boolean record;

  public static final String SERIALIZED_NAME_WAIT_URL = "waitUrl";
  @SerializedName(SERIALIZED_NAME_WAIT_URL)
  private String waitUrl;

  public static final String SERIALIZED_NAME_STATUS_CALLBACK_URL = "statusCallbackUrl";
  @SerializedName(SERIALIZED_NAME_STATUS_CALLBACK_URL)
  private String statusCallbackUrl;

  public CreateConferenceRequest() { 
  }

  public CreateConferenceRequest alias(String alias) {
    
    this.alias = alias;
    return this;
  }

   /**
   * A description for this Conference. Maximum 64 characters.
   * @return alias
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Conference. Maximum 64 characters.")

  public String getAlias() {
    return alias;
  }


  public void setAlias(String alias) {
    this.alias = alias;
  }


  public CreateConferenceRequest playBeep(PlayBeepEnum playBeep) {
    
    this.playBeep = playBeep;
    return this;
  }

   /**
   * Controls when a beep is played. Valid values: &#x60;always&#x60;, &#x60;never&#x60;, &#x60;entryOnly&#x60;, &#x60;exitOnly&#x60;.
   * @return playBeep
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Controls when a beep is played. Valid values: `always`, `never`, `entryOnly`, `exitOnly`.")

  public PlayBeepEnum getPlayBeep() {
    return playBeep;
  }


  public void setPlayBeep(PlayBeepEnum playBeep) {
    this.playBeep = playBeep;
  }


  public CreateConferenceRequest record(Boolean record) {
    
    this.record = record;
    return this;
  }

   /**
   * Setting to &#x60;true&#x60; records the entire Conference.
   * @return record
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Setting to `true` records the entire Conference.")

  public Boolean getRecord() {
    return record;
  }


  public void setRecord(Boolean record) {
    this.record = record;
  }


  public CreateConferenceRequest waitUrl(String waitUrl) {
    
    this.waitUrl = waitUrl;
    return this;
  }

   /**
   * If specified, a URL for the audio file that provides custom hold music for the Conference when it is in the populated state. Otherwise, FreeClimb uses a system default audio file. This is always fetched using HTTP GET and is fetched just once &amp;mdash; when the Conference is created.
   * @return waitUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If specified, a URL for the audio file that provides custom hold music for the Conference when it is in the populated state. Otherwise, FreeClimb uses a system default audio file. This is always fetched using HTTP GET and is fetched just once &mdash; when the Conference is created.")

  public String getWaitUrl() {
    return waitUrl;
  }


  public void setWaitUrl(String waitUrl) {
    this.waitUrl = waitUrl;
  }


  public CreateConferenceRequest statusCallbackUrl(String statusCallbackUrl) {
    
    this.statusCallbackUrl = statusCallbackUrl;
    return this;
  }

   /**
   * This URL is invoked when the status of the Conference changes. For more information, see **statusCallbackUrl** (below).
   * @return statusCallbackUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This URL is invoked when the status of the Conference changes. For more information, see **statusCallbackUrl** (below).")

  public String getStatusCallbackUrl() {
    return statusCallbackUrl;
  }


  public void setStatusCallbackUrl(String statusCallbackUrl) {
    this.statusCallbackUrl = statusCallbackUrl;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateConferenceRequest createConferenceRequest = (CreateConferenceRequest) o;
    return Objects.equals(this.alias, createConferenceRequest.alias) &&
        Objects.equals(this.playBeep, createConferenceRequest.playBeep) &&
        Objects.equals(this.record, createConferenceRequest.record) &&
        Objects.equals(this.waitUrl, createConferenceRequest.waitUrl) &&
        Objects.equals(this.statusCallbackUrl, createConferenceRequest.statusCallbackUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alias, playBeep, record, waitUrl, statusCallbackUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateConferenceRequest {\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    playBeep: ").append(toIndentedString(playBeep)).append("\n");
    sb.append("    record: ").append(toIndentedString(record)).append("\n");
    sb.append("    waitUrl: ").append(toIndentedString(waitUrl)).append("\n");
    sb.append("    statusCallbackUrl: ").append(toIndentedString(statusCallbackUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

