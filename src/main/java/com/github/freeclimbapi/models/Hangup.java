/*
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.github.freeclimbapi.models;

import com.github.freeclimbapi.enums.*;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.Callable;

/**
 * The &#x60;Hangup&#x60; command terminates a Call. If &#x60;Hangup&#x60; is used as the first
 * action in a PerCL response, it does not prevent FreeClimb from answering the Call and billing
 * your account. See the &#x60;Reject&#x60; command to hang up at no charge.
 */
@ApiModel(
        description =
                "The `Hangup` command terminates a Call. If `Hangup` is used as the first action in"
                    + " a PerCL response, it does not prevent FreeClimb from answering the Call and"
                    + " billing your account. See the `Reject` command to hang up at no charge.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Hangup extends PerclCommand {
    public static String getDiscriminatorValue() {
        return null;
    }

    public static final String SERIALIZED_NAME_REASON = "reason";

    @SerializedName(SERIALIZED_NAME_REASON)
    private String reason;

    public Hangup() {
        this.command = this.getClass().getSimpleName();
    }

    public Hangup reason(String reason) {

        this.reason = reason;
        return this;
    }

    /**
     * The user defined reason for the hangup. In general, applications should use a set of
     * enumerated values that are predefined to cover all exit points of the Call flows for the
     * given application.
     *
     * @return reason
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value =
                    "The user defined reason for the hangup. In general, applications should use a"
                        + " set of enumerated values that are predefined to cover all exit points"
                        + " of the Call flows for the given application.")
    public String getReason() {
        return reason;
    }

    public void setReason(String reason) {
        this.reason = reason;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Hangup hangup = (Hangup) o;
        return Objects.equals(this.reason, hangup.reason) && super.equals(o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(reason, super.hashCode());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Hangup {\n");
        sb.append("    ").append(toIndentedString(super.toString())).append("\n");
        sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    @Override
    public Map<String, Callable<Object>> attributeTypeMap() {
        Map<String, Callable<Object>> attributes = new HashMap();
        attributes.put("reason", () -> this.getReason());
        return attributes;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
