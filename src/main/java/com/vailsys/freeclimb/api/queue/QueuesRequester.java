package com.vailsys.freeclimb.api.queue;

import com.google.gson.JsonSyntaxException;
import com.vailsys.freeclimb.api.APIAccountRequester;
import com.vailsys.freeclimb.api.FreeClimbException;
import com.vailsys.freeclimb.api.FreeClimbJSONException;
import com.vailsys.freeclimb.api.queue.member.MembersRequester;

import java.util.HashMap;

import static com.vailsys.freeclimb.json.FreeClimbGson.gson;

/**
 * This class represents the set of wrappers around the FreeClimb Queues API. It
 * provides methods to handle all the operations supported by the FreeClimb
 * Queues API.
 */
public class QueuesRequester extends APIAccountRequester {
    private static final String pathHead = "Queues";
    /** The default path for the Queues endpoint. */
    private final String path;
    /** The accountId for the acting account. */
    private final String actingAccountId;

    /**
     * Creates a QueuesRequester. For most SDK users QueuesRequesters will be
     * created automatically by the
     * {@link com.vailsys.freeclimb.api.FreeClimbClient} but is available for more
     * advanced users who only require the features in this specific requester and
     * not the rest of the features of the
     * {@link com.vailsys.freeclimb.api.FreeClimbClient}.
     *
     * @param credAccountId   The accountId to use as authentication credentials in
     *                        the HTTP Basic Auth header for requests made by this
     *                        requester.
     * @param credAuthToken   The authToken to use as authentication credentials in
     *                        the HTTP Basic Auth header for requests made by this
     *                        requester.
     * @param actingAccountId The accountId to act as. This can be the same as
     *                        {@code credAccountId} or the accountId of a subaccount
     *                        of the {@code credAccountId}.
     */
    public QueuesRequester(String credAccountId, String credAuthToken, String actingAccountId) {
        super(credAccountId, credAuthToken);
        this.actingAccountId = actingAccountId;
        this.path = APIAccountRequester.constructPath(APIAccountRequester.rootPath, this.actingAccountId, pathHead);
    }

    /**
     * Retrieve the @{code actingAccountId}.
     *
     * @return The {@code actingAccountId}.
     */
    public String getActingAccountId() {
        return this.actingAccountId;
    }

    /**
     * Retrieve the {@code path} value generated by the QueuesRequester. This is the
     * URL path used in requests to FreeClimb.
     *
     * @return The {@code path}.
     */
    public String getPath() {
        return this.path;
    }

    private String getQueuePath(String queueId) {
        return APIAccountRequester.constructPath(this.getPath(), queueId);
    }

    /**
     * Allows developers using the SDK to change which instance of the FreeClimb API
     * that the QueuesRequester points to.
     *
     * @param newUrl The new URL to use in place of the default
     *               APIAccountRequester.FREECLIMB_URL
     */
    public void setFreeClimbUrl(String newUrl) {
        super.setFreeClimbUrl(newUrl);
    }

    /**
     * Retrieve a list of Queues associated with the {@code actingAccountId}. This
     * wraps a HTTP GET request to the FreeClimb API's /Accounts/$accountId/Queues
     * endpoint. This will retrieve all queues for the acting account.
     *
     * @return An in-language representation of FreeClimb's paginated list response.
     *         This will be a paginated list of queues as returned by the FreeClimb
     *         API.
     * @throws FreeClimbException if the request fails or the response is not valid
     *                            JSON.
     */
    public QueueList get() throws FreeClimbException {
        return new QueueList(this.getCredentialAccountId(), this.getCredentialAuthToken(), this.GET(this.getPath()));
    }

    /**
     * Retrieve a list of queues associated with the {@code actingAccountId}. This
     * wraps a HTTP GET request to the FreeClimb API's /Accounts/$accountId/Queues
     * endpoint. This will retrieve all queues for the acting account.
     *
     * @param filters an object containing a number of possible ways to filter the
     *                queues returned by FreeClimb.
     *
     * @return An in-language representation of FreeClimb's paginated list response.
     *         This will be a paginated list of queues as returned by the FreeClimb
     *         API.
     *
     * @see com.vailsys.freeclimb.api.queue.QueuesSearchFilters
     * @throws FreeClimbException when the filter result is not valid JSON or the
     *                            request fails.
     */
    public QueueList get(QueuesSearchFilters filters) throws FreeClimbException {
        HashMap<String, String> filtersMap;
        try {
            filtersMap = gson.fromJson(gson.toJson(filters), APIAccountRequester.GETMapType);
        } catch (JsonSyntaxException jse) {
            throw new FreeClimbJSONException(jse);
        }

        return new QueueList(this.getCredentialAccountId(), this.getCredentialAuthToken(),
                this.GET(this.getPath(), filtersMap));
    }

    /**
     * Retrieve a single queue from FreeClimb,
     *
     * @param queueId The {@code queueId} of the desired queue.
     *
     * @return The queue matching the {@code queueId} provided.
     * @throws FreeClimbException when the request fails or the response is not
     *                            valid JSON.
     */
    public Queue get(String queueId) throws FreeClimbException {
        return Queue.fromJson(this.GET(this.getQueuePath(queueId)));
    }

    /**
     * Update the existing queue associated with the {@code queueId}. This wraps an
     * HTTP POST request to the FreeClimb API's /Accounts/$accountId/Queues/$queueId
     * endpoint.
     *
     * @param queueId The {@code queueId} of the desired queue.
     * @param options The {@code QueueUpdateOptions} to change in the target queue.
     * @see com.vailsys.freeclimb.api.queue.QueueUpdateOptions
     *
     * @return The queue matching the {@code queueId} provided.
     * @throws FreeClimbException if the request fails or the response is not valid
     *                            JSON.
     */
    public Queue update(String queueId, QueueUpdateOptions options) throws FreeClimbException {
        return Queue.fromJson(this.POST(this.getQueuePath(queueId), gson.toJson(options)));
    }

    /**
     * Create a new queue through the FreeClimb API. This function wraps an HTTP
     * POST request to the FreeClimb API's /Account/$accounId/Queues endpoint. This
     * creates a new queue from the {@code actingAccountId}'s account.
     *
     * @return The {@link com.vailsys.freeclimb.api.queue.Queue} object returned by
     *         FreeClimb that represents the queue that was created.
     * @throws FreeClimbException when the request fails or the response is not
     *                            valid JSON.
     */
    public Queue create() throws FreeClimbException {
        return Queue.fromJson(this.POST(this.getPath(), null));
    }

    /**
     * Create a new queue through the FreeClimb API. This function wraps an HTTP
     * POST request to the FreeClimb API's /Account/$accounId/Queues endpoint. This
     * creates a new queue from the {@code actingAccountId}'s account.
     *
     * @param options Optional arguments that can be provided when creating a queue.
     *                See FreeClimb documentation for details.
     * @return The {@link com.vailsys.freeclimb.api.queue.Queue} object returned by
     *         FreeClimb that represents the queue that was created.
     * @see com.vailsys.freeclimb.api.queue.QueueCreateOptions
     * @throws FreeClimbException when the request fails or the response is not
     *                            valid JSON.
     */
    public Queue create(QueueCreateOptions options) throws FreeClimbException {
        return Queue.fromJson(this.POST(this.getPath(), gson.toJson(options)));
    }

    /**
     * Creates a {@link com.vailsys.freeclimb.api.queue.member.MembersRequester}
     * bound to a specific queue.
     *
     * @param queueId The {@code queueId} to bind the MembersRequester to.
     *
     * @return The {@code MembersRequester} that was created.
     */
    public MembersRequester getMembersRequester(String queueId) {
        return new MembersRequester(super.getCredentialAccountId(), super.getCredentialAuthToken(),
                this.getActingAccountId(), this.getQueuePath(queueId));
    }
}
