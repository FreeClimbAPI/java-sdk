package com.vailsys.freeclimb.api.account;

import com.vailsys.freeclimb.api.APIRequester;
import com.vailsys.freeclimb.api.FreeClimbException;

import static com.vailsys.freeclimb.json.FreeClimbGson.gson;

/**
 * This class represents the set of wrappers around the FreeClimb Accounts API.
 * It provides methods to handle all the operations supported by the FreeClimb
 * Accounts API.
 */
public class AccountRequester extends APIRequester {
    private static final String pathHead = "Accounts";

    /** The default path for the Accounts endpoint. */
    private final String path;
    /** The accountId for the acting account. */
    private final String actingAccountId;

    /**
     * Creates an AccountRequester. For most SDK users AccountRequesters will be
     * created automatically by the
     * {@link com.vailsys.freeclimb.api.FreeClimbClient} but is available for more
     * advanced users who only require the features in this specific requester and
     * not the rest of the features of the
     * {@link com.vailsys.freeclimb.api.FreeClimbClient}.
     *
     * @param credAccountId   The accountId to use as authentication credentials in
     *                        the HTTP Basic Auth header for requests made by this
     *                        requester.
     * @param credApiKey   The apiKey to use as authentication credentials in
     *                        the HTTP Basic Auth header for requests made by this
     *                        requester.
     * @param actingAccountId The accountId to as as. This can be the same as
     *                        {@code credAccountId} or the accountId of a subaccount
     *                        of the {@code credAccountId}.
     */
    public AccountRequester(String credAccountId, String credApiKey, String actingAccountId) {
        super(credAccountId, credApiKey);
        this.actingAccountId = actingAccountId;
        this.path = APIRequester.constructAbsolutePath(pathHead);
    }

    /**
     * Retrieve the {@code path} value generated by the AccountRequester. This is
     * the URL path used in requests to FreeClimb.
     *
     * @return The {@code path}.
     */
    public String getPath() {
        return path;
    }

    /**
     * Retrieve the {@code actingAccountId}.
     *
     * @return The {@code actingAccountId}.
     */
    public String getActingAccountId() {
        return actingAccountId;
    }

    /**
     * Allows developers using the SDK to change which instance of the FreeClimb API
     * that the AccountRequester points to.
     *
     * @param newUrl The new URL to use in place of the default
     *               APIRequester.FREECLIMB_URL
     */
    public void setFreeClimbUrl(String newUrl) {
        super.setFreeClimbUrl(newUrl);
    }

    private String getAccountPath(String accountId) {
        return APIRequester.constructPath(this.getPath(), accountId);
    }

    /**
     * Retrieve a single account from FreeClimb.
     * 
     * @param accountId The {@code accountId} of the desired account.
     *
     * @return The account matching the {@code accountId} provided.
     * @throws FreeClimbException when the request fails or the JSON is invalid.
     */
    public Account get(String accountId) throws FreeClimbException {
        return Account.fromJson(this.GET(this.getAccountPath(accountId)));
    }

    /**
     * Update the existing account associated with {@code accountId}. This wraps an
     * HTTP POST request to the FreeClimb API's /Accounts/$accountId endpoint.
     * 
     * @param accountId The {@code accountId} of the desired account.
     * @param options   The {@code AccountUpdateOptions} to change in the target
     *                  account.
     * @see com.vailsys.freeclimb.api.account.AccountUpdateOptions
     *
     * @return The account matching the {@code accountId} provided.
     * @throws FreeClimbException when the request fails or the JSON is invalid.
     */
    public Account update(String accountId, AccountUpdateOptions options) throws FreeClimbException {
        return Account.fromJson(this.POST(this.getAccountPath(accountId), gson.toJson(options)));
    }

}
