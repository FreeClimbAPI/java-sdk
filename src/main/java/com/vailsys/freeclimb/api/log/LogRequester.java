package com.vailsys.freeclimb.api.log;

import com.vailsys.freeclimb.api.APIAccountRequester;
import com.vailsys.freeclimb.api.FreeClimbException;

import static com.vailsys.freeclimb.json.FreeClimbGson.gson;

/**
 * This class represents the set of wrappers around the FreeClimb Logs API. It
 * provides methods to handle all the operations supported by the FreeClimb Logs
 * API.
 */
public class LogRequester extends APIAccountRequester {
    private static final String pathHead = "Logs";
    /** The default path for the Logs endpoint. */
    private final String path;
    /** The accountId for the acting account. */
    private final String actingAccountId;

    /**
     * Creates a LogRequester. For most SDK users LogRequesters will be created
     * automatically by the {@link com.vailsys.freeclimb.api.FreeClimbClient} but is
     * available for more advanced users who only require the features in this
     * specific requester and not the rest of the features of the
     * {@link com.vailsys.freeclimb.api.FreeClimbClient}
     *
     * @param credAccountId   The accountId to use as authentication credentials in
     *                        the HTTP Basic Auth header for requests made by this
     *                        requester.
     * @param credApiKey   The apiKey to use as authentication credentials in
     *                        the HTTP Basic Auth header for requests made by this
     *                        requester.
     * @param actingAccountId The accountId to act as. This can be the same as
     *                        {@code credAccountId} or the accountId of a subaccount
     *                        of the {@code credAccountId}
     */
    public LogRequester(String credAccountId, String credApiKey, String actingAccountId) {
        super(credAccountId, credApiKey);
        this.actingAccountId = actingAccountId;
        this.path = APIAccountRequester.constructPath(APIAccountRequester.rootPath, this.actingAccountId, pathHead);
    }

    /**
     * Retrieve the {@code path} value generated by the LogRequester. This is the
     * URL path used in requests to FreeClimb.
     *
     * @return The {@code path}
     */
    public String getPath() {
        return path;
    }

    /**
     * Retrieve the {@code actingAccountId}.
     *
     * @return The {@code actingAccountId}
     */
    public String getActingAccountId() {
        return actingAccountId;
    }

    /**
     * Allows developers using the SDK to change which instance of the FreeClimb API
     * that the ConferencesRequester points to.
     *
     * @param newUrl The new URL to use in place of the default
     *               APIRequester.FREECLIMB_URL
     */
    public void setFreeClimbUrl(String newUrl) {
        super.setFreeClimbUrl(newUrl);
    }

    /**
     * Retrieve a list of logs associated with the {@code actingAccountId}. This
     * wraps na HTTP GET request to the FreeClimb API's /Accounts/$accountId/Logs
     * endpiont. This will retrieve all logs for the acting account.
     *
     * @return An in-language representation of FreeClimb's paginated list response.
     *         This will be a paginated list of logs as returned by the FreeClimb
     *         API.
     * @throws FreeClimbException when the request fails or the JSON is invalid.
     */
    public LogList get() throws FreeClimbException {
        return new LogList(this.getCredentialAccountId(), this.getCredentialApiKey(), this.GET(this.getPath()));
    }

    /**
     * Retrieve a list of logs associated with the {@code actingAccountId}. This
     * wraps an HTTP POST request to the FreeClimb API's /Accounts/$accountId/Logs
     * endpoint.
     *
     * @param filters an Object containing a number of possible ways to filter the
     *                logs returned by FreeClimb.
     *
     * @return An in-language representation of FreeClimb's paginated list response.
     *         This will be a paginated list of logs as returned by the FreeClimb
     *         API.
     * @throws FreeClimbException when the request fails or the JSON is invalid.
     */
    public LogList get(LogSearchFilters filters) throws FreeClimbException {
        return new LogList(this.getCredentialAccountId(), this.getCredentialApiKey(),
                this.POST(this.getPath(), gson.toJson(filters)));
    }
}
