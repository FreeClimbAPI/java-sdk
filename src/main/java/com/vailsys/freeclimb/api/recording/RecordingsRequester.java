package com.vailsys.freeclimb.api.recording;

import java.io.*;
import java.util.HashMap;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.Files;
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;

import com.vailsys.freeclimb.KnownSizeInputStream;
import com.vailsys.freeclimb.api.APIAccountRequester;
import com.vailsys.freeclimb.api.FreeClimbException;
import com.vailsys.freeclimb.api.FreeClimbJSONException;

import static com.vailsys.freeclimb.json.FreeClimbGson.gson;

import com.google.gson.JsonSyntaxException;

/**
 * This class represents the set of wrappers around the FreeClimb Recordings
 * API. It provides methods to handle all the operations supported by the
 * FreeClimb Recordings API.
 */
public class RecordingsRequester extends APIAccountRequester {
	private static final String pathHead = "Recordings";
	private static final String downloadSuffix = "Download";
	private static final String streamSuffix = "Stream";
	/** The default path for the Recordings endpoint. */
	private final String path;
	/** The accountId for the acting account. */
	private final String actingAccountId;

	/**
	 * Creates a RecordingsRequester. For most SDK users, RecordingsRequesters will
	 * be created automatically by the
	 * {@link com.vailsys.freeclimb.api.FreeClimbClient} but is available for more
	 * advanced users who only require the features in this specific requester and
	 * not the rest of the features of the
	 * {@link com.vailsys.freeclimb.api.FreeClimbClient}
	 * 
	 * @param credAccountId   The accountId to use as authentication credentials in
	 *                        the HTTP Basic Auth header for requests made by this
	 *                        requester.
	 * @param credApiKey   The apiKey to use as authentication credentials in
	 *                        the HTTP Basic Auth header for requests made by this
	 *                        requester.
	 * @param actingAccountId The accountId to act as. This can be the same as
	 *                        {@code credAccountId} or the accountId of a subaccount
	 *                        of the {@code credAccountId}.
	 */
	public RecordingsRequester(String credAccountId, String credApiKey, String actingAccountId) {
		super(credAccountId, credApiKey);
		this.actingAccountId = actingAccountId;
		this.path = APIAccountRequester.constructPath(APIAccountRequester.rootPath, this.actingAccountId, pathHead);
	}

	/**
	 * Retrieve the {@code actingAccountId}.
	 *
	 * @return The {@code actingAccountId}.
	 */
	public String getActingAccountId() {
		return this.actingAccountId;
	}

	/**
	 * Retrieve the {@code path} value generated by the RecordingsRequester. This is
	 * the URL path used in requests to FreeClimb.
	 *
	 * @return The {@code path}.
	 */
	public String getPath() {
		return this.path;
	}

	private String getRecordingPath(String recordingId) {
		return APIAccountRequester.constructPath(this.path, recordingId);
	}

	private String getDownloadPath(String recordingId) {
		return APIAccountRequester.constructPath(this.getRecordingPath(recordingId), downloadSuffix);
	}

	private String getStreamPath(String recordingId) {
		return APIAccountRequester.constructPath(this.getRecordingPath(recordingId), streamSuffix);
	}

	/**
	 * Allows developers using the SDK to change which instance of the FreeClimb API
	 * that the RecordingsRequester points to.
	 *
	 * @param newUrl The new URL to use in place of the default
	 *               APIAccountRequester.FREECLIMB_URL
	 */
	public void setFreeClimbUrl(String newUrl) {
		super.setFreeClimbUrl(newUrl);
	}

	/**
	 * Retrieve a list of Recording metadata resources from FreeClimb. This wraps an
	 * HTTP GET request to the FreeClimb API's /Recordings.
	 *
	 * @return An in-language representation of FreeClimb's paginated list response.
	 *         This will be a paginated list of recordings as returned by the
	 *         FreeClimb API.
	 * @throws FreeClimbException when the request fails or the response JSON is
	 *                            invalid.
	 */
	public RecordingList getMeta() throws FreeClimbException {
		return new RecordingList(this.getCredentialAccountId(), this.getCredentialApiKey(), this.GET(this.path));
	}

	/**
	 * Retrieve a list of Recording metadata associated with the
	 * {@code actingAccountId}. This wraps an HTTP GET request to the FreeClimb
	 * API's /Accounts/$accountId/Recordings endpoint. This will retrieve all
	 * recordings for the acting account.
	 *
	 * @param filters an object containing a number of possible ways to filter the
	 *                recordings returned by FreeClimb.
	 *
	 * @return an in-language representation of FreeClimb's paginated list response.
	 *         This will be a paginated list of recordings as returned by the
	 *         FreeClimb API.
	 *
	 * @see com.vailsys.freeclimb.api.recording.RecordingsSearchFilters
	 *
	 * @throws FreeClimbException when the request fails or the filter cannot be
	 *                            converted into valid JSON.
	 */
	public RecordingList getMeta(RecordingsSearchFilters filters) throws FreeClimbException {
		HashMap<String, String> filtersMap;

		try {
			filtersMap = gson.fromJson(gson.toJson(filters), APIAccountRequester.GETMapType);
		} catch (JsonSyntaxException jse) {
			throw new FreeClimbJSONException(jse);
		}

		return new RecordingList(this.getCredentialAccountId(), this.getCredentialApiKey(),
				this.GET(this.path, filtersMap));
	}

	/**
	 * Retrieve the metadata for a single Recording from FreeClimb.
	 *
	 * @param recordingId The {@code recordingId} of the desired Recording.
	 * @return The recording matching the {@code recordingId} provided.
	 * @throws FreeClimbException when the request fails or the response JSON is
	 *                            invalid.
	 */
	public Recording getMetaByRecordingId(String recordingId) throws FreeClimbException {
		return Recording.fromJson(this.GET(this.getRecordingPath(recordingId)));
	}

	/**
	 * Retrieve the audio data of a recording in wav format and store it in the
	 * filename provided. This wraps an HTTP GET request to
	 * /Accounts/$accountId/Recordings/$recordingId/Download.
	 *
	 * @param recordingId The {@code recordingId} of the desired Recording.
	 * @param fileName    The name of the file to write the recording to on disk.
	 * @return The size of the recording in bytes.
	 * @throws FreeClimbException when the request fails.
	 * @throws IOException        when copying the data to the file fails.
	 */
	public Integer download(String recordingId, String fileName) throws FreeClimbException, IOException {
		return this.download(recordingId, Paths.get(fileName));
	}

	/**
	 * Retrieve the audio data of a recording in wav format and store it in the File
	 * provided. This wraps an HTTP GET request to
	 * /Accounts/$accountId/Recordings/$recordingId/Download.
	 *
	 * @param recordingId The {@code recordingId} of the desired Recording.
	 * @param file        The {@link java.io.File} to store the recording data in.
	 * @return The size of the recording in bytes.
	 * @throws FreeClimbException when the request fails.
	 * @throws IOException        when copying the data to the file fails
	 */
	public Integer download(String recordingId, File file) throws FreeClimbException, IOException {
		return this.download(recordingId, file.toPath());
	}

	/**
	 * Retrieve the audio data of a recording in wav format and store it in the Path
	 * provided. This wraps an HTTP GET request to
	 * /Accounts/$accountId/Recordings/$recordingId/Download.
	 *
	 * @param recordingId The {@code recordingId} of the desired Recording.
	 * @param path        The {@link java.nio.file.Path} to store the recording data
	 *                    in.
	 * @return The size of the recording in bytes
	 * @throws FreeClimbException when the request fails.
	 * @throws IOException        when writing the data to the path fails.
	 */
	public Integer download(String recordingId, Path path) throws FreeClimbException, IOException {
		KnownSizeInputStream ksis = this.GETStream(this.getDownloadPath(recordingId));
		BufferedInputStream bis = new BufferedInputStream(ksis);
		Files.copy(bis, path, REPLACE_EXISTING);
		return ksis.size();
	}

	/**
	 * Retrieve the audio data of a recording in wav format and return the byte
	 * array of the data. This wraps an HTTP GET request to
	 * /Accounts/$accountId/Recordings/$recordingId/Download.
	 *
	 * @param recordingId The {@code recordingId} of the desired Recording.
	 * @return The byte array representing the recording audio in wav format.
	 * @throws FreeClimbException when the request fails or the response cannot be
	 *                            parsed.
	 */
	public byte[] download(String recordingId) throws FreeClimbException {
		KnownSizeInputStream ksis = this.GETStream(this.getDownloadPath(recordingId));
		Integer length = ksis.size();
		byte[] resultArray = new byte[length];
		DataInputStream dis = new DataInputStream(ksis);

		try {
			dis.readFully(resultArray);
		} catch (IOException ioe) {
			throw new FreeClimbException("Failed to read server response into byte array.", ioe);
		}

		return resultArray;
	}

	/**
	 * Retrieve the audio stream of a Recording in wav format. This wraps an HTTP
	 * GET request to /Accounts/$accountId/Recordings/$recordingId/Stream.
	 *
	 * @param recordingId The {@code recordingId} of the desired Recording.
	 * @return The stream for the recording matching the {@code recordingId}
	 *         provided.
	 * @throws FreeClimbException when the request fails or the JSON is invalid.
	 */
	public KnownSizeInputStream stream(String recordingId) throws FreeClimbException {
		return this.GETStream(this.getStreamPath(recordingId));
	}

	/**
	 * Delete the Recording associated with the {@code recordingId}. This wraps an
	 * HTTP DELETE request to the FreeClimb API's
	 * /Accounts/$accountId/Recordings/$recordingId endpoint.
	 *
	 * @param recordingId The {@code recordingId} of the Recording to delete.
	 *
	 * @throws FreeClimbException when the request fails.
	 */
	public void delete(String recordingId) throws FreeClimbException {
		this.DELETE(this.path + "/" + recordingId);
	}
}
