package com.vailsys.freeclimb.api.application;

import com.google.gson.JsonSyntaxException;
import com.vailsys.freeclimb.api.APIAccountRequester;
import com.vailsys.freeclimb.api.FreeClimbException;
import com.vailsys.freeclimb.api.FreeClimbJSONException;

import java.util.HashMap;

import static com.vailsys.freeclimb.json.FreeClimbGson.gson;

/**
 * This class represents the set of wrappers around the FreeClimb Applications
 * API. It provides methods to handle all the operations supported by the
 * FreeClimb Applications API.
 */
public class ApplicationsRequester extends APIAccountRequester {
    private static final String pathHead = "Applications";
    /** The default path for the Applications endpoint. */
    private final String path;
    /** The accountId for the acting account. */
    private final String actingAccountId;

    /**
     * Creates an ApplicationsRequester. For most SDK users ApplicationsRequesters
     * will be created automatically by the
     * {@link com.vailsys.freeclimb.api.FreeClimbClient} but is available for more
     * advanced users who only require the features in this specific requester and
     * not the rest of the features of the
     * {@link com.vailsys.freeclimb.api.FreeClimbClient}.
     *
     * @param credAccountId   The accountId to use as authentication credentials in
     *                        the HTTP Basic Auth header for requests made by this
     *                        requester.
     * @param credAuthToken   The authToken to use as authentication credentials in
     *                        the HTTP Basic Auth header for requests made by this
     *                        requester.
     * @param actingAccountId The accountId to act as. This can be the same as
     *                        {@code credAccountId} or the accountId of a subaccount
     *                        of the {@code credAccountId}.
     */
    public ApplicationsRequester(String credAccountId, String credAuthToken, String actingAccountId) {
        super(credAccountId, credAuthToken);
        this.actingAccountId = actingAccountId;
        this.path = APIAccountRequester.constructPath(APIAccountRequester.rootPath, this.actingAccountId, pathHead);
    }

    /**
     * Retrieve the {@code path} value generated by the ApplicationsRequester. This
     * is the URL path used in requests to FreeClimb.
     *
     * @return The {@code path}.
     */
    public String getPath() {
        return path;
    }

    /**
     * Retrieve the {@code actingAccountId}.
     *
     * @return The {@code actingAccountId}.
     */
    public String getActingAccountId() {
        return actingAccountId;
    }

    private String getApplicationPath(String applicationId) {
        return APIAccountRequester.constructPath(this.getPath(), applicationId);
    }

    /**
     * Allows developers using the SDK to change which instance of the FreeClimb API
     * that the ApplicationsRequester points to.
     *
     * @param newUrl The new URL to use in place of the default
     *               APIRequester.FREECLIMB_URL
     */
    public void setFreeClimbUrl(String newUrl) {
        super.setFreeClimbUrl(newUrl);
    }

    /**
     * Retrieve a list of Applications associated with the {@code actingAccountId}.
     * This wraps a HTTP GET request to the FreeClimb API's
     * /Accounts/$accountId/Applications endpoint. This will retrieve all
     * applications for the acting account.
     *
     * @return An in-language representation of FreeClimb's paginated list response.
     *         This will be a paginated list of applications as returned by the
     *         FreeClimb API.
     * @throws FreeClimbException when the request fails or the JSON is invalid.
     */
    public ApplicationList get() throws FreeClimbException {
        return new ApplicationList(this.getCredentialAccountId(), this.getCredentialAuthToken(),
                this.GET(this.getPath()));
    }

    /**
     * Retrieve a list of applications associated with the {@code actingAccountId}.
     * This wraps a HTTP GET request to the FreeClimb API's
     * /Accounts/$accountId/Applications endpoint. This will retrieve all
     * applications for the acting account.
     *
     * @param filters an object containing a number of possible ways to filter the
     *                applications returned by FreeClimb.
     *
     * @return An in-language representation of FreeClimb's paginated list response.
     *         This will be a paginated list of applications as returned by the
     *         FreeClimb API.
     * @throws FreeClimbException when the request fails or the JSON is invalid.
     */
    public ApplicationList get(ApplicationsSearchFilters filters) throws FreeClimbException {
        HashMap<String, String> filtersMap;

        try {
            filtersMap = gson.fromJson(gson.toJson(filters), APIAccountRequester.GETMapType);
        } catch (JsonSyntaxException jse) {
            throw new FreeClimbJSONException(jse);
        }

        return new ApplicationList(this.getCredentialAccountId(), this.getCredentialAuthToken(),
                this.GET(this.getPath(), filtersMap));
    }

    /**
     * Retrieve a single application from FreeClimb.
     *
     * @param applicationId The {@code applicationId} of the desired application.
     *
     * @return The application matching the {@code applicationId} provided.
     * @throws FreeClimbException when the request fails or the JSON is invalid.
     */
    public Application get(String applicationId) throws FreeClimbException {
        return Application.fromJson(this.GET(this.getApplicationPath(applicationId)));
    }

    /**
     * Update the existing application associated with the {@code applicationId}.
     * This wraps an HTTP POST request to the FreeClimb API's
     * /Accounts/$accountId/Applications/$applicationId endpoint.
     *
     * @param applicationId The {@code applicationId} of the desired application.
     * @param options       The
     *                      {@link com.vailsys.freeclimb.api.application.ApplicationUpdateOptions}
     *                      to change in the target application.
     *
     * @return The application matching the {@code applicationId} provided.
     * @throws FreeClimbException when the request fails or the JSON is invalid.
     */
    public Application update(String applicationId, ApplicationUpdateOptions options) throws FreeClimbException {
        return Application.fromJson(this.POST(this.getApplicationPath(applicationId), gson.toJson(options)));
    }

    /**
     * Create a new application through the FreeClimb API. This function wraps an
     * HTTP POST request to the FreeClimb API's /Accounts/$accountId/Applications
     * endpoint. This creates a new application from the {@code actingAccountId}'s
     * account.
     *
     * @return the {@link com.vailsys.freeclimb.api.application.Application} object
     *         returned by FreeClimb that represents the application that was
     *         created.
     * @throws FreeClimbException when the request fails or the JSON is invalid.
     */
    public Application create() throws FreeClimbException {
        return Application.fromJson(this.POST(this.getPath(), null));
    }

    /**
     * Create a new application through the FreeClimb API. This function wraps an
     * HTTP POST request to the FreeClimb API's /Accounts/$accountId/Applications
     * endpoint. This creates a new application from the {@code actingAccountId}'s
     * account.
     *
     * @param options Optional arguments that can be provided when creating an
     *                application. See FreeClimb documentation for details.
     * @see com.vailsys.freeclimb.api.application.ApplicationCreateOptions
     *
     * @return the {@link com.vailsys.freeclimb.api.application.Application} object
     *         returned by FreeClimb that represents the application that was
     *         created.
     * @throws FreeClimbException when the request fails or the JSON is invalid.
     */
    public Application create(ApplicationCreateOptions options) throws FreeClimbException {
        return Application.fromJson(this.POST(this.getPath(), gson.toJson(options)));
    }

    /**
     * Delete the application associated with the {@code applicationId}. This wraps
     * an HTTP DELETE request to the FreeClimb API's
     * /Accounts/$accountId/Applications/$applicationId endpoint.
     *
     * @param applicationId The {@code applicationId} of the application to delete.
     * @throws FreeClimbException when the request fails.
     */
    public void delete(String applicationId) throws FreeClimbException {
        this.DELETE(this.getApplicationPath(applicationId));
    }
}
