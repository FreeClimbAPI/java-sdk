/*
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.freeclimbapi;

import com.github.freeclimbapi.AddToConference;
import com.github.freeclimbapi.CreateConference;
import com.github.freeclimbapi.Dequeue;
import com.github.freeclimbapi.Enqueue;
import com.github.freeclimbapi.GetDigits;
import com.github.freeclimbapi.GetSpeech;
import com.github.freeclimbapi.Hangup;
import com.github.freeclimbapi.OutDial;
import com.github.freeclimbapi.OutDialAllOf;
import com.github.freeclimbapi.Park;
import com.github.freeclimbapi.Pause;
import com.github.freeclimbapi.PerclCommand;
import com.github.freeclimbapi.Play;
import com.github.freeclimbapi.PlayEarlyMedia;
import com.github.freeclimbapi.RecordUtterance;
import com.github.freeclimbapi.Redirect;
import com.github.freeclimbapi.Reject;
import com.github.freeclimbapi.RemoveFromConference;
import com.github.freeclimbapi.Say;
import com.github.freeclimbapi.SendDigits;
import com.github.freeclimbapi.SetListen;
import com.github.freeclimbapi.SetTalk;
import com.github.freeclimbapi.Sms;
import com.github.freeclimbapi.StartRecordCall;
import com.github.freeclimbapi.TerminateConference;
import com.github.freeclimbapi.Unpark;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Model tests for OutDial
 */
public class OutDialTest {
    private final OutDial model = new OutDial();
    /**
     * Test the property 'command'
     */
    @Test
    public void commandTest() {

        Assert.assertEquals("OutDial", model.getCommand());
    }

    /**
     * Test the property 'actionUrl'
     */
    @Test
    public void actionUrlTest() {

        model.setActionUrl("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getActionUrl());
        
        
    }

    /**
     * Test the property 'callConnectUrl'
     */
    @Test
    public void callConnectUrlTest() {

        model.setCallConnectUrl("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getCallConnectUrl());
        
        
    }

    /**
     * Test the property 'callingNumber'
     */
    @Test
    public void callingNumberTest() {

        
        model.setCallingNumber(new BigDecimal(1.0));
        Assert.assertEquals(new BigDecimal(1.0), model.getCallingNumber());
        
    }

    /**
     * Test the property 'destination'
     */
    @Test
    public void destinationTest() {

        
        model.setDestination(new BigDecimal(1.0));
        Assert.assertEquals(new BigDecimal(1.0), model.getDestination());
        
    }

    /**
     * Test the property 'ifMachine'
     */
    @Test
    public void ifMachineTest() {

        model.setIfMachine("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getIfMachine());
        
        
    }

    /**
     * Test the property 'ifMachineUrl'
     */
    @Test
    public void ifMachineUrlTest() {

        model.setIfMachineUrl("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getIfMachineUrl());
        
        
    }

    /**
     * Test the property 'sendDigits'
     */
    @Test
    public void sendDigitsTest() {

        model.setSendDigits("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getSendDigits());
        
        
    }

    /**
     * Test the property 'statusCallbackUrl'
     */
    @Test
    public void statusCallbackUrlTest() {

        model.setStatusCallbackUrl("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getStatusCallbackUrl());
        
        
    }

    /**
     * Test the property 'timeout'
     */
    @Test
    public void timeoutTest() {

        
    }

    /**
     * Test the property 'privacyMode'
     */
    @Test
    public void privacyModeTest() {
        model.setPrivacyMode(false);
        Assert.assertEquals(false, model.getPrivacyMode());
        
        
    }

    @Test
    public void buildTest() throws Exception {
         
        model.setActionUrl("TEST_STRING");   
        model.setCallConnectUrl("TEST_STRING");    
        model.setCallingNumber(new BigDecimal(1.0));  
        model.setDestination(new BigDecimal(1.0)); 
        model.setIfMachine("TEST_STRING");   
        model.setIfMachineUrl("TEST_STRING");   
        model.setSendDigits("TEST_STRING");   
        model.setStatusCallbackUrl("TEST_STRING");    
        model.setPrivacyMode(false);  
        Map<String, Map<String, Object>> build = model.build();
        Map<String, Object> attributes = build.get(model.getCommand());
        Assert.assertEquals(attributes.get("actionUrl"), model.getActionUrl());
        Assert.assertEquals(attributes.get("callConnectUrl"), model.getCallConnectUrl());
        Assert.assertEquals(attributes.get("callingNumber"), model.getCallingNumber());
        Assert.assertEquals(attributes.get("destination"), model.getDestination());
        Assert.assertEquals(attributes.get("ifMachine"), model.getIfMachine());
        Assert.assertEquals(attributes.get("ifMachineUrl"), model.getIfMachineUrl());
        Assert.assertEquals(attributes.get("sendDigits"), model.getSendDigits());
        Assert.assertEquals(attributes.get("statusCallbackUrl"), model.getStatusCallbackUrl());
        Assert.assertEquals(attributes.get("timeout"), model.getTimeout());
        Assert.assertEquals(attributes.get("privacyMode"), model.getPrivacyMode());
    }
}
