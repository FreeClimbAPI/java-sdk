/*
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.freeclimbapi;

import com.github.freeclimbapi.ApiException;
import com.github.freeclimbapi.enums.*;
import com.github.freeclimbapi.models.*;
import static org.junit.Assert.*;
import com.github.freeclimbapi.Configuration;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.File;

/**
 * API tests for DefaultApi
 */
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Buy a Phone Number
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buyAPhoneNumberTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        BuyIncomingNumberRequest buyIncomingNumberRequest = buyIncomingNumberRequestBuyIncomingNumberRequestTestValue();
        
        IncomingNumberResult response = apiInstance.buyAPhoneNumber(buyIncomingNumberRequest);
        // TODO: test validations
        assertEquals(response.getClass(), IncomingNumberResult.class);
        
    }
    /**
     * Create a Conference
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAConferenceTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        CreateConferenceRequest createConferenceRequest = createConferenceRequestCreateConferenceRequestTestValue();
        
        ConferenceResult response = apiInstance.createAConference(createConferenceRequest);
        // TODO: test validations
        assertEquals(response.getClass(), ConferenceResult.class);
        
    }
    /**
     * Create a Queue
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAQueueTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        QueueRequest queueRequest = queueRequestQueueRequestTestValue();
        
        QueueResult response = apiInstance.createAQueue(queueRequest);
        // TODO: test validations
        assertEquals(response.getClass(), QueueResult.class);
        
    }
    /**
     * Create an application
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAnApplicationTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        ApplicationRequest applicationRequest = applicationRequestApplicationRequestTestValue();
        
        ApplicationResult response = apiInstance.createAnApplication(applicationRequest);
        // TODO: test validations
        assertEquals(response.getClass(), ApplicationResult.class);
        
    }
    /**
     * Delete a Recording
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteARecordingTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String recordingId = recordingIdStringTestValue();
        
        apiInstance.deleteARecording(recordingId);
        // TODO: test validations
        
    }
    /**
     * Delete an application
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAnApplicationTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String applicationId = applicationIdStringTestValue();
        
        apiInstance.deleteAnApplication(applicationId);
        // TODO: test validations
        
    }
    /**
     * Delete an Incoming Number
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAnIncomingNumberTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String phoneNumberId = phoneNumberIdStringTestValue();
        
        apiInstance.deleteAnIncomingNumber(phoneNumberId);
        // TODO: test validations
        
    }
    /**
     * Dequeue a Member
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dequeueAMemberTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String queueId = queueIdStringTestValue();
        
        String callId = callIdStringTestValue();
        
        QueueMember response = apiInstance.dequeueAMember(queueId, callId);
        // TODO: test validations
        assertEquals(response.getClass(), QueueMember.class);
        
    }
    /**
     * Dequeue Head Member
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dequeueHeadMemberTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String queueId = queueIdStringTestValue();
        
        QueueMember response = apiInstance.dequeueHeadMember(queueId);
        // TODO: test validations
        assertEquals(response.getClass(), QueueMember.class);
        
    }
    /**
     * Download a Recording File
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadARecordingFileTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String recordingId = recordingIdStringTestValue();
        
        File response = apiInstance.downloadARecordingFile(recordingId);
        // TODO: test validations
        assertEquals(response.getClass(), File.class);
        
    }
    /**
     * Filter Logs
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void filterLogsTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        FilterLogsRequest filterLogsRequest = filterLogsRequestFilterLogsRequestTestValue();
        
        LogList response = apiInstance.filterLogs(filterLogsRequest);
        // TODO: test validations
        assertEquals(response.getClass(), LogList.class);
        
    }
    /**
     * Get a Call
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getACallTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String callId = callIdStringTestValue();
        
        CallResult response = apiInstance.getACall(callId);
        // TODO: test validations
        assertEquals(response.getClass(), CallResult.class);
        
    }
    /**
     * Get a Conference
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAConferenceTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String conferenceId = conferenceIdStringTestValue();
        
        ConferenceResult response = apiInstance.getAConference(conferenceId);
        // TODO: test validations
        assertEquals(response.getClass(), ConferenceResult.class);
        
    }
    /**
     * Get a Member
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAMemberTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String queueId = queueIdStringTestValue();
        
        String callId = callIdStringTestValue();
        
        QueueMember response = apiInstance.getAMember(queueId, callId);
        // TODO: test validations
        assertEquals(response.getClass(), QueueMember.class);
        
    }
    /**
     * Get a Participant
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAParticipantTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String conferenceId = conferenceIdStringTestValue();
        
        String callId = callIdStringTestValue();
        
        ConferenceParticipantResult response = apiInstance.getAParticipant(conferenceId, callId);
        // TODO: test validations
        assertEquals(response.getClass(), ConferenceParticipantResult.class);
        
    }
    /**
     * Get a Queue
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAQueueTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String queueId = queueIdStringTestValue();
        
        QueueResult response = apiInstance.getAQueue(queueId);
        // TODO: test validations
        assertEquals(response.getClass(), QueueResult.class);
        
    }
    /**
     * Get a Recording
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getARecordingTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String recordingId = recordingIdStringTestValue();
        
        RecordingResult response = apiInstance.getARecording(recordingId);
        // TODO: test validations
        assertEquals(response.getClass(), RecordingResult.class);
        
    }
    /**
     * Get an Account
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnAccountTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        AccountResult response = apiInstance.getAnAccount();
        // TODO: test validations
        assertEquals(response.getClass(), AccountResult.class);
        
    }
    /**
     * Get an Application
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnApplicationTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String applicationId = applicationIdStringTestValue();
        
        ApplicationResult response = apiInstance.getAnApplication(applicationId);
        // TODO: test validations
        assertEquals(response.getClass(), ApplicationResult.class);
        
    }
    /**
     * Get an Incoming Number
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnIncomingNumberTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String phoneNumberId = phoneNumberIdStringTestValue();
        
        IncomingNumberResult response = apiInstance.getAnIncomingNumber(phoneNumberId);
        // TODO: test validations
        assertEquals(response.getClass(), IncomingNumberResult.class);
        
    }
    /**
     * Get an SMS Message
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnSmsMessageTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String messageId = messageIdStringTestValue();
        
        MessageResult response = apiInstance.getAnSmsMessage(messageId);
        // TODO: test validations
        assertEquals(response.getClass(), MessageResult.class);
        
    }
    /**
     * Get Head Member
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHeadMemberTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String queueId = queueIdStringTestValue();
        
        QueueMember response = apiInstance.getHeadMember(queueId);
        // TODO: test validations
        assertEquals(response.getClass(), QueueMember.class);
        
    }
    /**
     * List Active Queues
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listActiveQueuesTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String alias = aliasStringTestValue();
        
        QueueList response = apiInstance.listActiveQueues(alias);
        // TODO: test validations
        assertEquals(response.getClass(), QueueList.class);
        
    }
    /**
     * List All Account Logs
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllAccountLogsTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        LogList response = apiInstance.listAllAccountLogs();
        // TODO: test validations
        assertEquals(response.getClass(), LogList.class);
        
    }
    /**
     * List applications
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationsTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String alias = aliasStringTestValue();
        
        ApplicationList response = apiInstance.listApplications(alias);
        // TODO: test validations
        assertEquals(response.getClass(), ApplicationList.class);
        
    }
    /**
     * List available numbers
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAvailableNumbersTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String phoneNumber = phoneNumberStringTestValue();
        
        String region = regionStringTestValue();
        
        String country = countryStringTestValue();
        
        Boolean voiceEnabled = voiceEnabledBooleanTestValue();
        
        Boolean smsEnabled = smsEnabledBooleanTestValue();
        
        Boolean capabilitiesVoice = capabilitiesVoiceBooleanTestValue();
        
        Boolean capabilitiesSms = capabilitiesSmsBooleanTestValue();
        
        Boolean capabilitiesTollFree = capabilitiesTollFreeBooleanTestValue();
        
        Boolean capabilitiesTenDLC = capabilitiesTenDLCBooleanTestValue();
        
        Boolean capabilitiesShortCode = capabilitiesShortCodeBooleanTestValue();
        
        AvailableNumberList response = apiInstance.listAvailableNumbers(phoneNumber, region, country, voiceEnabled, smsEnabled, capabilitiesVoice, capabilitiesSms, capabilitiesTollFree, capabilitiesTenDLC, capabilitiesShortCode);
        // TODO: test validations
        assertEquals(response.getClass(), AvailableNumberList.class);
        
    }
    /**
     * List Call Logs
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCallLogsTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String callId = callIdStringTestValue();
        
        LogList response = apiInstance.listCallLogs(callId);
        // TODO: test validations
        assertEquals(response.getClass(), LogList.class);
        
    }
    /**
     * List Call Recordings
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCallRecordingsTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String callId = callIdStringTestValue();
        
        String dateCreated = dateCreatedStringTestValue();
        
        RecordingList response = apiInstance.listCallRecordings(callId, dateCreated);
        // TODO: test validations
        assertEquals(response.getClass(), RecordingList.class);
        
    }
    /**
     * List Calls
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCallsTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        Boolean active = activeBooleanTestValue();
        
        String to = toStringTestValue();
        
        String from = fromStringTestValue();
        
        CallStatus status = statusCallStatusTestValue();
        
        String startTime = startTimeStringTestValue();
        
        String endTime = endTimeStringTestValue();
        
        String parentCallId = parentCallIdStringTestValue();
        
        CallList response = apiInstance.listCalls(active, to, from, status, startTime, endTime, parentCallId);
        // TODO: test validations
        assertEquals(response.getClass(), CallList.class);
        
    }
    /**
     * List Conferences
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConferencesTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String status = statusStringTestValue();
        
        String alias = aliasStringTestValue();
        
        String dateCreated = dateCreatedStringTestValue();
        
        String dateUpdated = dateUpdatedStringTestValue();
        
        ConferenceList response = apiInstance.listConferences(status, alias, dateCreated, dateUpdated);
        // TODO: test validations
        assertEquals(response.getClass(), ConferenceList.class);
        
    }
    /**
     * List Incoming Numbers
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIncomingNumbersTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String phoneNumber = phoneNumberStringTestValue();
        
        String alias = aliasStringTestValue();
        
        String region = regionStringTestValue();
        
        String country = countryStringTestValue();
        
        String applicationId = applicationIdStringTestValue();
        
        Boolean hasApplication = hasApplicationBooleanTestValue();
        
        Boolean voiceEnabled = voiceEnabledBooleanTestValue();
        
        Boolean smsEnabled = smsEnabledBooleanTestValue();
        
        Boolean capabilitiesVoice = capabilitiesVoiceBooleanTestValue();
        
        Boolean capabilitiesSms = capabilitiesSmsBooleanTestValue();
        
        Boolean capabilitiesTollFree = capabilitiesTollFreeBooleanTestValue();
        
        Boolean capabilitiesTenDLC = capabilitiesTenDLCBooleanTestValue();
        
        Boolean capabilitiesShortCode = capabilitiesShortCodeBooleanTestValue();
        
        Boolean offnet = offnetBooleanTestValue();
        
        IncomingNumberList response = apiInstance.listIncomingNumbers(phoneNumber, alias, region, country, applicationId, hasApplication, voiceEnabled, smsEnabled, capabilitiesVoice, capabilitiesSms, capabilitiesTollFree, capabilitiesTenDLC, capabilitiesShortCode, offnet);
        // TODO: test validations
        assertEquals(response.getClass(), IncomingNumberList.class);
        
    }
    /**
     * List Members
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMembersTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String queueId = queueIdStringTestValue();
        
        QueueMemberList response = apiInstance.listMembers(queueId);
        // TODO: test validations
        assertEquals(response.getClass(), QueueMemberList.class);
        
    }
    /**
     * List Participants
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listParticipantsTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String conferenceId = conferenceIdStringTestValue();
        
        Boolean talk = talkBooleanTestValue();
        
        Boolean listen = listenBooleanTestValue();
        
        ConferenceParticipantList response = apiInstance.listParticipants(conferenceId, talk, listen);
        // TODO: test validations
        assertEquals(response.getClass(), ConferenceParticipantList.class);
        
    }
    /**
     * List Recordings
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRecordingsTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String callId = callIdStringTestValue();
        
        String conferenceId = conferenceIdStringTestValue();
        
        String dateCreated = dateCreatedStringTestValue();
        
        RecordingList response = apiInstance.listRecordings(callId, conferenceId, dateCreated);
        // TODO: test validations
        assertEquals(response.getClass(), RecordingList.class);
        
    }
    /**
     * List SMS Messages
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSmsMessagesTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String to = toStringTestValue();
        
        String from = fromStringTestValue();
        
        String beginTime = beginTimeStringTestValue();
        
        String endTime = endTimeStringTestValue();
        
        MessageDirection direction = directionMessageDirectionTestValue();
        
        MessagesList response = apiInstance.listSmsMessages(to, from, beginTime, endTime, direction);
        // TODO: test validations
        assertEquals(response.getClass(), MessagesList.class);
        
    }
    /**
     * Make a Call
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void makeACallTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        MakeCallRequest makeCallRequest = makeCallRequestMakeCallRequestTestValue();
        
        CallResult response = apiInstance.makeACall(makeCallRequest);
        // TODO: test validations
        assertEquals(response.getClass(), CallResult.class);
        
    }
    /**
     * Remove a Participant
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAParticipantTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String conferenceId = conferenceIdStringTestValue();
        
        String callId = callIdStringTestValue();
        
        apiInstance.removeAParticipant(conferenceId, callId);
        // TODO: test validations
        
    }
    /**
     * Send an SMS Message
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendAnSmsMessageTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        MessageRequest messageRequest = messageRequestMessageRequestTestValue();
        
        MessageResult response = apiInstance.sendAnSmsMessage(messageRequest);
        // TODO: test validations
        assertEquals(response.getClass(), MessageResult.class);
        
    }
    /**
     * Stream a Recording File
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamARecordingFileTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String recordingId = recordingIdStringTestValue();
        
        File response = apiInstance.streamARecordingFile(recordingId);
        // TODO: test validations
        assertEquals(response.getClass(), File.class);
        
    }
    /**
     * Update a Conference
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAConferenceTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String conferenceId = conferenceIdStringTestValue();
        
        UpdateConferenceRequest updateConferenceRequest = updateConferenceRequestUpdateConferenceRequestTestValue();
        
        ConferenceResult response = apiInstance.updateAConference(conferenceId, updateConferenceRequest);
        // TODO: test validations
        assertEquals(response.getClass(), ConferenceResult.class);
        
    }
    /**
     * Update a Live Call
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateALiveCallTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String callId = callIdStringTestValue();
        
        UpdateCallRequest updateCallRequest = updateCallRequestUpdateCallRequestTestValue();
        
        apiInstance.updateALiveCall(callId, updateCallRequest);
        // TODO: test validations
        
    }
    /**
     * Update a Participant
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAParticipantTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String conferenceId = conferenceIdStringTestValue();
        
        String callId = callIdStringTestValue();
        
        UpdateConferenceParticipantRequest updateConferenceParticipantRequest = updateConferenceParticipantRequestUpdateConferenceParticipantRequestTestValue();
        
        ConferenceParticipantResult response = apiInstance.updateAParticipant(conferenceId, callId, updateConferenceParticipantRequest);
        // TODO: test validations
        assertEquals(response.getClass(), ConferenceParticipantResult.class);
        
    }
    /**
     * Update a Queue
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAQueueTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String queueId = queueIdStringTestValue();
        
        QueueRequest queueRequest = queueRequestQueueRequestTestValue();
        
        QueueResult response = apiInstance.updateAQueue(queueId, queueRequest);
        // TODO: test validations
        assertEquals(response.getClass(), QueueResult.class);
        
    }
    /**
     * Manage an account
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAnAccountTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        AccountRequest accountRequest = accountRequestAccountRequestTestValue();
        
        apiInstance.updateAnAccount(accountRequest);
        // TODO: test validations
        
    }
    /**
     * Update an application
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAnApplicationTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String applicationId = applicationIdStringTestValue();
        
        ApplicationRequest applicationRequest = applicationRequestApplicationRequestTestValue();
        
        ApplicationResult response = apiInstance.updateAnApplication(applicationId, applicationRequest);
        // TODO: test validations
        assertEquals(response.getClass(), ApplicationResult.class);
        
    }
    /**
     * Update an Incoming Number
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAnIncomingNumberTest() throws ApiException {
        ApiClient defaultClient = new ApiClient();
        defaultClient.setBasePath("http://127.0.0.1:4010");
        defaultClient.setAccountId("YOUR_ACCOUNT_ID");
        defaultClient.setApiKey("YOUR_API_KEY");

        DefaultApi apiInstance = new DefaultApi(defaultClient);
        
        
        String phoneNumberId = phoneNumberIdStringTestValue();
        
        IncomingNumberRequest incomingNumberRequest = incomingNumberRequestIncomingNumberRequestTestValue();
        
        IncomingNumberResult response = apiInstance.updateAnIncomingNumber(phoneNumberId, incomingNumberRequest);
        // TODO: test validations
        assertEquals(response.getClass(), IncomingNumberResult.class);
        
    }

    private BuyIncomingNumberRequest buyIncomingNumberRequestBuyIncomingNumberRequestTestValue() {
        BuyIncomingNumberRequest request = new BuyIncomingNumberRequest();
        request.setPhoneNumber("TEST-PHONE-NUMBER");
        request.setAlias("TEST-ALIAS");
        request.setApplicationId("TEST-APP-ID");
        return request;
    }

    private CreateConferenceRequest createConferenceRequestCreateConferenceRequestTestValue(){
        CreateConferenceRequest request = new CreateConferenceRequest();
        request.setAlias("TEST-ALIAS");
        request.setPlayBeep(PlayBeep.ALWAYS);
        request.setRecord(true);
        request.setStatusCallbackUrl("TEST-STATUS-CALLBACK-URL");
        request.setWaitUrl("TEST-WAIT-URL");
        return request;
    }
    
    private ApplicationRequest applicationRequestApplicationRequestTestValue() {
        ApplicationRequest request = new ApplicationRequest();
        request.setAlias("TEST-ALIAS");
        request.setCallConnectUrl("TEST-CALL-CONNECT-URL");
        request.setSmsFallbackUrl("TEST-SMS-FALLBACK-URL");
        request.setSmsUrl("TEST-SMS-URL");
        request.setStatusCallbackUrl("TEST-STATUS-CALLBACK-URL");
        request.setVoiceFallbackUrl("TEST-VOICE-FALLBACK-URL");
        request.setVoiceUrl("TEST-VOICE-URL");
        return request;
    }

    private FilterLogsRequest filterLogsRequestFilterLogsRequestTestValue() {
        FilterLogsRequest request = new FilterLogsRequest();
        request.setPql("pql_example");
        return request;
    }
    
    private MessageRequest messageRequestMessageRequestTestValue() {
        MessageRequest request = new MessageRequest();
        request.setAccountId("");
        request.setDateCreated("");
        request.setDateUpdated("");
        request.setFrom("_from_example");
        request.setNotificationUrl("");
        request.setRevision(0);
        request.setTo("to_example");
        request.setText("Example Text");
        request.setUri("");
        return request;
    }

    private UpdateConferenceRequest updateConferenceRequestUpdateConferenceRequestTestValue() {
        UpdateConferenceRequest request = new UpdateConferenceRequest();
        request.setAlias("TEST-ALIAS");
        request.setPlayBeep(PlayBeep.ALWAYS);
        request.setStatus(UpdateConferenceRequestStatus.EMPTY);
        return request;
    }

    private QueueRequest queueRequestQueueRequestTestValue() {
        QueueRequest request = new QueueRequest();
        request.setAlias("TEST-ALIAS");
        request.setMaxSize(0);
        return request;
    }

    private MakeCallRequest makeCallRequestMakeCallRequestTestValue() {
        MakeCallRequest request = new MakeCallRequest();
        request.setApplicationId("applicationId_example");
        request.setCallConnectUrl("callConnectUrl_example");
        request.setFrom("_from_example");
        request.setIfMachine("ifMachine_example");
        request.setIfMachineUrl("ifMachineUrl_example");
        request.setParentCallId("parentCallId_example");
        request.setSendDigits("sendDigits_example");
        request.setPrivacyMode(false);
        request.setTimeout(300);
        request.setTo("to_example");
        return request;
    }

    private UpdateCallRequest updateCallRequestUpdateCallRequestTestValue() {
        UpdateCallRequest request = new UpdateCallRequest();
        request.setStatus(UpdateCallRequestStatus.COMPLETED);
        return request;
    }

    private UpdateConferenceParticipantRequest updateConferenceParticipantUpdateConferenceParticipantRequestRequest() {
        UpdateConferenceParticipantRequest request = new UpdateConferenceParticipantRequest(); 
        request.setListen(false);
        request.setTalk(false);
        return request;
    }

    private AccountRequest accountRequestAccountRequestTestValue() {
        AccountRequest request = new AccountRequest();
        request.setAlias("TEST-ALIAS");
        request.setLabel("label_example");
        return request;
    }

    private IncomingNumberRequest incomingNumberRequestIncomingNumberRequestTestValue(){
        IncomingNumberRequest request = new IncomingNumberRequest();
        request.setAlias("TEST-ALIAS");
        request.setApplicationId("applicationId_example");
        return request;
    }

    private String aliasStringTestValue() {
        String alias = "TEST-ALIAS";
        return alias;
    }

    private String queueIdStringTestValue() {
        String queueId = "queueId_example";
        return queueId;
    }
        
    private String callIdStringTestValue() {
        String callId = "callId_example";
        return callId;
    }

    private String conferenceIdStringTestValue() {
        String conferenceId = "conferenceId_example";
        return conferenceId;
    }

    private String recordingIdStringTestValue() {
        String recordingId = "recordingId_examples";
        return recordingId;
    }

    private String applicationIdStringTestValue() {
        String applicationId = "applicationId_example";
        return applicationId;
    }

    private String phoneNumberIdStringTestValue() {
        String phoneNumberId = "phoneNumberId_example";
        return phoneNumberId;
    }

    private String messageIdStringTestValue() {
        String messageId = "messageId_example";
        return messageId;
    }
     
    private String regionStringTestValue() {
        String region = "region_example";
        return region;
    }
    
    private String countryStringTestValue() {
        String country = "country_example";
        return country;
    }
    
    private Boolean voiceEnabledBooleanTestValue() {
        Boolean voiceEnabled = true;
        return voiceEnabled;
    }
    
    private Boolean smsEnabledBooleanTestValue() {
        Boolean smsEnabled = true;
        return smsEnabled;
    }
    
    private Boolean capabilitiesVoiceBooleanTestValue() {
        Boolean capabilitiesVoice = true;
        return capabilitiesVoice;

    }
    
    private Boolean capabilitiesSmsBooleanTestValue() {
        Boolean capabilitiesSms = true;
        return capabilitiesSms;
    }
    
    private Boolean capabilitiesTollBooleanFreeTestValue() {
        Boolean capabilitiesTollFree = true;
        return capabilitiesTollFree;
    }
    
    private Boolean capabilitiesTenDLCBooleanTestValue() {
        Boolean capabilitiesTenDLC = true;
        return capabilitiesTenDLC;
    }

    private Boolean capabilitiesShortCodeBooleanTestValue() {
        Boolean capabilitiesShortCode = true;
        return capabilitiesShortCode;
    }
 
    private Boolean offnetBooleanTestValue(){
        Boolean offnet = true;
        return offnet;
    }

    private String dateCreatedStringTestValue() {
        String dateCreated = "dateCreated_example";
        return dateCreated;
    }
    
    private String dateUpdatedStringTestValue() {
        String dateUpdated = "dateUpdated_example";
        return dateUpdated;
    }
    
    private String statusStringTestValue() {
        String status = "status_example";
        return status;
    }
    
    private Boolean talkBooleanTestValue() {
        Boolean talk = true;
        return talk;
    }

    private Boolean listenBooleanTestValue() {
        Boolean listen = true;
        return listen;
    }

    private MessageDirection directionMessageDirectionTestValue() {
        MessageDirection direction = MessageDirection.INBOUND;
        return direction;
    }

    private CallStatus statusCallStatusTestValue() {
        CallStatus status = CallStatus.QUEUED;
        return status;
    }
    
    private Boolean activeBooleanTestValue()
    {
        Boolean active = false;
        return active;
    }
    
    private String toStringTestValue()
    {
        String to = "to_example";
        return to;
    }
    
    private String fromStringTestValue()
    {
        String from = "_from_example";
        return from;
    }
    
    private String startTimeStringTestValue()
    {
        String startTime = "startTime_example";
        return startTime;
    }

    private String endTimeStringTestValue()
    {
        String endTime = "endTime_example";
        return endTime;
    }
     
    private String parentCallIdStringTestValue()
    {
        String parentCallId = null;
        return parentCallId;
    }

    private String phoneNumberStringTestValue(){
        String phoneNumber = "phoneNumber_example";
        return phoneNumber;
    }

    private Boolean hasApplicationBooleanTestValue(){
        Boolean hasApplication = true;
        return hasApplication;
    }

    private String beginTimeStringTestValue(){
        String beginTime = "beginTime_example";
        return beginTime;
    }

    private Boolean capabilitiesTollFreeBooleanTestValue() {
        Boolean capabilitiesTollFree = true;
        return capabilitiesTollFree;
    }

     private UpdateConferenceParticipantRequest updateConferenceParticipantRequestUpdateConferenceParticipantRequestTestValue() {
        UpdateConferenceParticipantRequest request = new UpdateConferenceParticipantRequest();
        request.setListen(true);
        request.setTalk(true);
        return request;
    } 
}
