/*
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.github.freeclimbapi;

import com.github.freeclimbapi.enums.*;
import com.github.freeclimbapi.models.*;
import java.util.*;
import org.junit.Assert;
import org.junit.Test;

/** Model tests for CallControlWebhook */
public class CallControlWebhookTest {

    private final CallControlWebhook model = new CallControlWebhook();

    /** Test the property 'requestType' */
    @Test
    public void requestTypeTest() {}

    /** Test the property 'callId' */
    @Test
    public void callIdTest() {

        model.setCallId("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getCallId());
    }

    /** Test the property 'accountId' */
    @Test
    public void accountIdTest() {

        model.setAccountId("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getAccountId());
    }

    /** Test the property 'conferenceId' */
    @Test
    public void conferenceIdTest() {

        model.setConferenceId("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getConferenceId());
    }

    /** Test the property 'digits' */
    @Test
    public void digitsTest() {

        model.setDigits("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getDigits());
    }

    /** Test the method 'equalsTrue' */
    @Test
    public void equalsTrueTest() {
        CallControlWebhook test1 = new CallControlWebhook();

        test1.setRequestType("TS");

        test1.setCallId("TS");

        test1.setAccountId("TS");

        test1.setConferenceId("TS");

        test1.setDigits("TS");

        CallControlWebhook test2 = new CallControlWebhook();

        test2.setRequestType("TS");

        test2.setCallId("TS");

        test2.setAccountId("TS");

        test2.setConferenceId("TS");

        test2.setDigits("TS");

        Assert.assertTrue(test1.equals(test2));
    }

    /** Test the method 'equalsFalse' */
    @Test
    public void equalsFalseTest() {
        CallControlWebhook test1 = new CallControlWebhook();

        test1.setRequestType("TS");

        test1.setCallId("TS");

        test1.setAccountId("TS");

        test1.setConferenceId("TS");

        test1.setDigits("TS");

        CallControlWebhook test2 = new CallControlWebhook();

        test2.setRequestType("TS2");

        test2.setCallId("TS2");

        test2.setAccountId("TS2");

        test2.setConferenceId("TS2");

        test2.setDigits("TS2");

        Assert.assertFalse(test1.equals(test2));
    }

    /** Test the method 'hashCodeType' */
    @Test
    public void hashCodeTypeTest() {
        CallControlWebhook test1 = new CallControlWebhook();

        test1.setRequestType("TS");

        test1.setCallId("TS");

        test1.setAccountId("TS");

        test1.setConferenceId("TS");

        test1.setDigits("TS");

        int hashCode1 = test1.hashCode();
        Assert.assertTrue(Integer.class.isInstance(hashCode1));
    }

    /** Test the method 'toStringEquals' */
    @Test
    public void toStringEqualsTest() {
        CallControlWebhook test1 = new CallControlWebhook();

        test1.setRequestType("TS");

        test1.setCallId("TS");

        test1.setAccountId("TS");

        test1.setConferenceId("TS");

        test1.setDigits("TS");

        CallControlWebhook test2 = new CallControlWebhook();

        test2.setRequestType("TS");

        test2.setCallId("TS");

        test2.setAccountId("TS");

        test2.setConferenceId("TS");

        test2.setDigits("TS");

        String toString1 = test1.toString();
        String toString2 = test2.toString();
        Assert.assertEquals(toString1, toString2);
    }

    /** Test the method 'hashCodeEqualsTrue' */
    @Test
    public void hashCodeEqualsTrueTest() {
        CallControlWebhook test1 = new CallControlWebhook();

        test1.setRequestType("TS");

        test1.setCallId("TS");

        test1.setAccountId("TS");

        test1.setConferenceId("TS");

        test1.setDigits("TS");

        CallControlWebhook test2 = new CallControlWebhook();

        test2.setRequestType("TS");

        test2.setCallId("TS");

        test2.setAccountId("TS");

        test2.setConferenceId("TS");

        test2.setDigits("TS");

        Assert.assertEquals(test1.hashCode(), test2.hashCode());
    }

    /** Test the method 'hashCodeEqualsFalse' */
    @Test
    public void hashCodeEqualsFalseTest() {
        CallControlWebhook test1 = new CallControlWebhook();

        test1.setRequestType("TS");

        test1.setCallId("TS");

        test1.setAccountId("TS");

        test1.setConferenceId("TS");

        test1.setDigits("TS");

        CallControlWebhook test2 = new CallControlWebhook();

        test2.setRequestType("TS2");

        test2.setCallId("TS2");

        test2.setAccountId("TS2");

        test2.setConferenceId("TS2");

        test2.setDigits("TS2");

        Assert.assertNotEquals(test1.hashCode(), test2.hashCode());
    }

    /** Test the method 'toStringType' */
    @Test
    public void toStringTypeTest() {
        CallControlWebhook test1 = new CallControlWebhook();

        test1.setRequestType("TS");

        test1.setCallId("TS");

        test1.setAccountId("TS");

        test1.setConferenceId("TS");

        test1.setDigits("TS");

        String toString1 = test1.toString();
        Assert.assertTrue(String.class.isInstance(toString1));
    }

    @Test
    public void deserializeTest() {
        String json = "{ \"requestType\": \"callControl\" }";
        CallControlWebhook webhookInstance = CallControlWebhook.deserialize(json);
        Assert.assertTrue(webhookInstance instanceof CallControlWebhook);
    }
}
