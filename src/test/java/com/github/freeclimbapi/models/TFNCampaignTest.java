/*
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.github.freeclimbapi;

import com.github.freeclimbapi.enums.*;
import com.github.freeclimbapi.models.*;
import java.util.*;
import org.junit.Assert;
import org.junit.Test;

/** Model tests for TFNCampaign */
public class TFNCampaignTest {

    private final TFNCampaign model = new TFNCampaign();

    /** Test the property 'accountId' */
    @Test
    public void accountIdTest() {

        model.setAccountId("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getAccountId());
    }

    /** Test the property 'campaignId' */
    @Test
    public void campaignIdTest() {

        model.setCampaignId("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getCampaignId());
    }

    /** Test the property 'useCase' */
    @Test
    public void useCaseTest() {

        model.setUseCase("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getUseCase());
    }

    /** Test the property 'registrationStatus' */
    @Test
    public void registrationStatusTest() {
        model.setRegistrationStatus(SMSTollFreeCampaignRegistrationStatus.UNREGISTERED);
        Assert.assertEquals(
                model.getRegistrationStatus(), SMSTollFreeCampaignRegistrationStatus.UNREGISTERED);
        model.setRegistrationStatus(SMSTollFreeCampaignRegistrationStatus.INITIATED);
        Assert.assertEquals(
                model.getRegistrationStatus(), SMSTollFreeCampaignRegistrationStatus.INITIATED);
        model.setRegistrationStatus(SMSTollFreeCampaignRegistrationStatus.PENDING);
        Assert.assertEquals(
                model.getRegistrationStatus(), SMSTollFreeCampaignRegistrationStatus.PENDING);
        model.setRegistrationStatus(SMSTollFreeCampaignRegistrationStatus.DECLINED);
        Assert.assertEquals(
                model.getRegistrationStatus(), SMSTollFreeCampaignRegistrationStatus.DECLINED);
        model.setRegistrationStatus(SMSTollFreeCampaignRegistrationStatus.REGISTERED);
        Assert.assertEquals(
                model.getRegistrationStatus(), SMSTollFreeCampaignRegistrationStatus.REGISTERED);
    }

    /** Test the property 'dateCreated' */
    @Test
    public void dateCreatedTest() {

        model.setDateCreated("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getDateCreated());
    }

    /** Test the property 'dateUpdated' */
    @Test
    public void dateUpdatedTest() {

        model.setDateUpdated("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getDateUpdated());
    }

    /** Test the property 'dateCreatedISO' */
    @Test
    public void dateCreatedISOTest() {

        model.setDateCreatedISO("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getDateCreatedISO());
    }

    /** Test the property 'dateUpdatedISO' */
    @Test
    public void dateUpdatedISOTest() {

        model.setDateUpdatedISO("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getDateUpdatedISO());
    }

    /** Test the property 'revision' */
    @Test
    public void revisionTest() {

        model.setRevision(1);
        Assert.assertEquals(1, (int) model.getRevision());
    }

    /** Test the method 'equalsTrue' */
    @Test
    public void equalsTrueTest() {
        TFNCampaign test1 = new TFNCampaign();

        test1.setAccountId("TS");

        test1.setCampaignId("TS");

        test1.setUseCase("TS");

        test1.setRegistrationStatus(SMSTollFreeCampaignRegistrationStatus.UNREGISTERED);

        test1.setDateCreated("TS");

        test1.setDateUpdated("TS");

        test1.setDateCreatedISO("TS");

        test1.setDateUpdatedISO("TS");

        test1.setRevision(1);

        TFNCampaign test2 = new TFNCampaign();

        test2.setAccountId("TS");

        test2.setCampaignId("TS");

        test2.setUseCase("TS");

        test2.setRegistrationStatus(SMSTollFreeCampaignRegistrationStatus.UNREGISTERED);

        test2.setDateCreated("TS");

        test2.setDateUpdated("TS");

        test2.setDateCreatedISO("TS");

        test2.setDateUpdatedISO("TS");

        test2.setRevision(1);

        Assert.assertTrue(test1.equals(test2));
    }

    /** Test the method 'equalsFalse' */
    @Test
    public void equalsFalseTest() {
        TFNCampaign test1 = new TFNCampaign();

        test1.setAccountId("TS");

        test1.setCampaignId("TS");

        test1.setUseCase("TS");

        test1.setRegistrationStatus(SMSTollFreeCampaignRegistrationStatus.INITIATED);

        test1.setDateCreated("TS");

        test1.setDateUpdated("TS");

        test1.setDateCreatedISO("TS");

        test1.setDateUpdatedISO("TS");

        test1.setRevision(1);

        TFNCampaign test2 = new TFNCampaign();

        test2.setAccountId("TS2");

        test2.setCampaignId("TS2");

        test2.setUseCase("TS2");

        test2.setRegistrationStatus(SMSTollFreeCampaignRegistrationStatus.UNREGISTERED);

        test2.setDateCreated("TS2");

        test2.setDateUpdated("TS2");

        test2.setDateCreatedISO("TS2");

        test2.setDateUpdatedISO("TS2");

        test2.setRevision(0);

        Assert.assertFalse(test1.equals(test2));
    }

    /** Test the method 'hashCodeType' */
    @Test
    public void hashCodeTypeTest() {
        TFNCampaign test1 = new TFNCampaign();

        test1.setAccountId("TS");

        test1.setCampaignId("TS");

        test1.setUseCase("TS");

        test1.setRegistrationStatus(SMSTollFreeCampaignRegistrationStatus.UNREGISTERED);

        test1.setDateCreated("TS");

        test1.setDateUpdated("TS");

        test1.setDateCreatedISO("TS");

        test1.setDateUpdatedISO("TS");

        test1.setRevision(1);

        int hashCode1 = test1.hashCode();
        Assert.assertTrue(Integer.class.isInstance(hashCode1));
    }

    /** Test the method 'toStringEquals' */
    @Test
    public void toStringEqualsTest() {
        TFNCampaign test1 = new TFNCampaign();

        test1.setAccountId("TS");

        test1.setCampaignId("TS");

        test1.setUseCase("TS");

        test1.setRegistrationStatus(SMSTollFreeCampaignRegistrationStatus.UNREGISTERED);

        test1.setDateCreated("TS");

        test1.setDateUpdated("TS");

        test1.setDateCreatedISO("TS");

        test1.setDateUpdatedISO("TS");

        test1.setRevision(1);

        TFNCampaign test2 = new TFNCampaign();

        test2.setAccountId("TS");

        test2.setCampaignId("TS");

        test2.setUseCase("TS");

        test2.setRegistrationStatus(SMSTollFreeCampaignRegistrationStatus.UNREGISTERED);

        test2.setDateCreated("TS");

        test2.setDateUpdated("TS");

        test2.setDateCreatedISO("TS");

        test2.setDateUpdatedISO("TS");

        test2.setRevision(1);

        String toString1 = test1.toString();
        String toString2 = test2.toString();
        Assert.assertEquals(toString1, toString2);
    }

    /** Test the method 'hashCodeEqualsTrue' */
    @Test
    public void hashCodeEqualsTrueTest() {
        TFNCampaign test1 = new TFNCampaign();

        test1.setAccountId("TS");

        test1.setCampaignId("TS");

        test1.setUseCase("TS");

        test1.setRegistrationStatus(SMSTollFreeCampaignRegistrationStatus.UNREGISTERED);

        test1.setDateCreated("TS");

        test1.setDateUpdated("TS");

        test1.setDateCreatedISO("TS");

        test1.setDateUpdatedISO("TS");

        test1.setRevision(1);

        TFNCampaign test2 = new TFNCampaign();

        test2.setAccountId("TS");

        test2.setCampaignId("TS");

        test2.setUseCase("TS");

        test2.setRegistrationStatus(SMSTollFreeCampaignRegistrationStatus.UNREGISTERED);

        test2.setDateCreated("TS");

        test2.setDateUpdated("TS");

        test2.setDateCreatedISO("TS");

        test2.setDateUpdatedISO("TS");

        test2.setRevision(1);

        Assert.assertEquals(test1.hashCode(), test2.hashCode());
    }

    /** Test the method 'hashCodeEqualsFalse' */
    @Test
    public void hashCodeEqualsFalseTest() {
        TFNCampaign test1 = new TFNCampaign();

        test1.setAccountId("TS");

        test1.setCampaignId("TS");

        test1.setUseCase("TS");

        test1.setRegistrationStatus(SMSTollFreeCampaignRegistrationStatus.INITIATED);

        test1.setDateCreated("TS");

        test1.setDateUpdated("TS");

        test1.setDateCreatedISO("TS");

        test1.setDateUpdatedISO("TS");

        test1.setRevision(1);

        TFNCampaign test2 = new TFNCampaign();

        test2.setAccountId("TS2");

        test2.setCampaignId("TS2");

        test2.setUseCase("TS2");

        test2.setRegistrationStatus(SMSTollFreeCampaignRegistrationStatus.UNREGISTERED);

        test2.setDateCreated("TS2");

        test2.setDateUpdated("TS2");

        test2.setDateCreatedISO("TS2");

        test2.setDateUpdatedISO("TS2");

        test2.setRevision(0);

        Assert.assertNotEquals(test1.hashCode(), test2.hashCode());
    }

    /** Test the method 'toStringType' */
    @Test
    public void toStringTypeTest() {
        TFNCampaign test1 = new TFNCampaign();

        test1.setAccountId("TS");

        test1.setCampaignId("TS");

        test1.setUseCase("TS");

        test1.setRegistrationStatus(SMSTollFreeCampaignRegistrationStatus.UNREGISTERED);

        test1.setDateCreated("TS");

        test1.setDateUpdated("TS");

        test1.setDateCreatedISO("TS");

        test1.setDateUpdatedISO("TS");

        test1.setRevision(1);

        String toString1 = test1.toString();
        Assert.assertTrue(String.class.isInstance(toString1));
    }
}
