/*
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.github.freeclimbapi;

import com.github.freeclimbapi.enums.*;
import com.github.freeclimbapi.models.*;
import java.util.*;
import java.util.Map;
import org.junit.Assert;
import org.junit.Test;

/** Model tests for Hangup */
public class HangupTest {

    private final Hangup model = new Hangup();

    /** Test the property 'reason' */
    @Test
    public void reasonTest() {

        model.setReason("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getReason());
    }

    /** Test the method 'equalsTrue' */
    @Test
    public void equalsTrueTest() {
        Hangup test1 = new Hangup();

        test1.setReason("TS");

        Hangup test2 = new Hangup();

        test2.setReason("TS");

        Assert.assertTrue(test1.equals(test2));
    }

    /** Test the method 'equalsFalse' */
    @Test
    public void equalsFalseTest() {
        Hangup test1 = new Hangup();

        test1.setReason("TS");

        Hangup test2 = new Hangup();

        test2.setReason("TS2");

        Assert.assertFalse(test1.equals(test2));
    }

    /** Test the method 'hashCodeType' */
    @Test
    public void hashCodeTypeTest() {
        Hangup test1 = new Hangup();

        test1.setReason("TS");

        int hashCode1 = test1.hashCode();
        Assert.assertTrue(Integer.class.isInstance(hashCode1));
    }

    /** Test the method 'toStringEquals' */
    @Test
    public void toStringEqualsTest() {
        Hangup test1 = new Hangup();

        test1.setReason("TS");

        Hangup test2 = new Hangup();

        test2.setReason("TS");

        String toString1 = test1.toString();
        String toString2 = test2.toString();
        Assert.assertEquals(toString1, toString2);
    }

    /** Test the method 'hashCodeEqualsTrue' */
    @Test
    public void hashCodeEqualsTrueTest() {
        Hangup test1 = new Hangup();

        test1.setReason("TS");

        Hangup test2 = new Hangup();

        test2.setReason("TS");

        Assert.assertEquals(test1.hashCode(), test2.hashCode());
    }

    /** Test the method 'hashCodeEqualsFalse' */
    @Test
    public void hashCodeEqualsFalseTest() {
        Hangup test1 = new Hangup();

        test1.setReason("TS");

        Hangup test2 = new Hangup();

        test2.setReason("TS2");

        Assert.assertNotEquals(test1.hashCode(), test2.hashCode());
    }

    /** Test the method 'toStringType' */
    @Test
    public void toStringTypeTest() {
        Hangup test1 = new Hangup();

        test1.setReason("TS");

        String toString1 = test1.toString();
        Assert.assertTrue(String.class.isInstance(toString1));
    }

    @Test
    public void commandTest() throws Exception {
        Assert.assertEquals("Hangup", model.getCommand());
    }

    @Test
    public void buildTest() throws Exception {

        model.setReason("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getReason());

        Map<String, Map<String, Object>> build = model.build();
        Map<String, Object> attributes = build.get(model.getCommand());
        Assert.assertEquals(attributes.get("reason"), model.getReason());
    }
}
