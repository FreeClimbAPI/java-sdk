/*
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.freeclimbapi;

import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.LocalDate;

import java.util.*;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.File;
import java.math.BigDecimal;
import java.net.URI;
import java.net.URISyntaxException;
import com.github.freeclimbapi.enums.*;
import com.github.freeclimbapi.models.*;

/**
 * Model tests for SMSTollFreeCampaign
 */
 public class SMSTollFreeCampaignTest {
    private final SMSTollFreeCampaign model = new SMSTollFreeCampaign(
    );
    
    
    /**
     * Test the property 'accountId'
     */
    @Test
    public void accountIdTest() {
      
      
      model.setAccountId("TEST_STRING");
      Assert.assertEquals("TEST_STRING", model.getAccountId());
      
      
    }
    /**
     * Test the property 'campaignId'
     */
    @Test
    public void campaignIdTest() {
      
      
      model.setCampaignId("TEST_STRING");
      Assert.assertEquals("TEST_STRING", model.getCampaignId());
      
      
    }
    /**
     * Test the property 'useCase'
     */
    @Test
    public void useCaseTest() {
      
      
      model.setUseCase("TEST_STRING");
      Assert.assertEquals("TEST_STRING", model.getUseCase());
      
      
    }
    /**
     * Test the property 'registrationStatus'
     */
    @Test
    public void registrationStatusTest() {
      
      model.setRegistrationStatus(SMSTollFreeCampaign.RegistrationStatusEnum.UNREGISTERED);
      Assert.assertEquals(model.getRegistrationStatus(),SMSTollFreeCampaign.RegistrationStatusEnum.UNREGISTERED);
      
      model.setRegistrationStatus(SMSTollFreeCampaign.RegistrationStatusEnum.INITIATED);
      Assert.assertEquals(model.getRegistrationStatus(),SMSTollFreeCampaign.RegistrationStatusEnum.INITIATED);
      
      model.setRegistrationStatus(SMSTollFreeCampaign.RegistrationStatusEnum.PENDING);
      Assert.assertEquals(model.getRegistrationStatus(),SMSTollFreeCampaign.RegistrationStatusEnum.PENDING);
      
      model.setRegistrationStatus(SMSTollFreeCampaign.RegistrationStatusEnum.DECLINED);
      Assert.assertEquals(model.getRegistrationStatus(),SMSTollFreeCampaign.RegistrationStatusEnum.DECLINED);
      
      model.setRegistrationStatus(SMSTollFreeCampaign.RegistrationStatusEnum.REGISTERED);
      Assert.assertEquals(model.getRegistrationStatus(),SMSTollFreeCampaign.RegistrationStatusEnum.REGISTERED);
      
    }
    /**
     * Test the property 'dateCreated'
     */
    @Test
    public void dateCreatedTest() {
      
      
      model.setDateCreated("TEST_STRING");
      Assert.assertEquals("TEST_STRING", model.getDateCreated());
      
      
    }
    /**
     * Test the property 'dateUpdated'
     */
    @Test
    public void dateUpdatedTest() {
      
      
      model.setDateUpdated("TEST_STRING");
      Assert.assertEquals("TEST_STRING", model.getDateUpdated());
      
      
    }
    /**
     * Test the property 'revision'
     */
    @Test
    public void revisionTest() {
      
      model.setRevision(1);
      Assert.assertEquals(1, (int) model.getRevision());
    }

      /**
     * Test the method 'equalsTrue'
     */

     @Test
    public void equalsTrueTest() {
      SMSTollFreeCampaign test1 = new SMSTollFreeCampaign();
        
        
      test1.setAccountId("TS");
      
        
        
      test1.setCampaignId("TS");
      
        
        
      test1.setUseCase("TS");
      
      test1.setRegistrationStatus(SMSTollFreeCampaign.RegistrationStatusEnum.UNREGISTERED);
        
        
      test1.setDateCreated("TS");
      
        
        
      test1.setDateUpdated("TS");
      
      test1.setRevision(1);
      SMSTollFreeCampaign test2 = new SMSTollFreeCampaign();
        
        
      test2.setAccountId("TS");
      
        
        
      test2.setCampaignId("TS");
      
        
        
      test2.setUseCase("TS");
      
      test2.setRegistrationStatus(SMSTollFreeCampaign.RegistrationStatusEnum.UNREGISTERED);
        
        
      test2.setDateCreated("TS");
      
        
        
      test2.setDateUpdated("TS");
      
      test2.setRevision(1);

      Assert.assertTrue(test1.equals(test2));
    }

    /**
     * Test the method 'equalsFalse'
     */

     @Test
    public void equalsFalseTest() {
      SMSTollFreeCampaign test1 = new SMSTollFreeCampaign();
        
        
      test1.setAccountId("TS");
      
        
        
      test1.setCampaignId("TS");
      
        
        
      test1.setUseCase("TS");
      
      test1.setRegistrationStatus(SMSTollFreeCampaign.RegistrationStatusEnum.INITIATED);
        
        
      test1.setDateCreated("TS");
      
        
        
      test1.setDateUpdated("TS");
      
      test1.setRevision(1);
      SMSTollFreeCampaign test2 = new SMSTollFreeCampaign();
        
        
      test2.setAccountId("TS2");
      
        
        
      test2.setCampaignId("TS2");
      
        
        
      test2.setUseCase("TS2");
      
      test2.setRegistrationStatus(SMSTollFreeCampaign.RegistrationStatusEnum.UNREGISTERED);
        
        
      test2.setDateCreated("TS2");
      
        
        
      test2.setDateUpdated("TS2");
      
      test2.setRevision(0);

      Assert.assertFalse(test1.equals(test2));
    }
    
    /**
     * Test the method 'hashCodeType'
     */

     @Test
    public void hashCodeTypeTest() {
      SMSTollFreeCampaign test1 = new SMSTollFreeCampaign();
        
        
      test1.setAccountId("TS");
      
        
        
      test1.setCampaignId("TS");
      
        
        
      test1.setUseCase("TS");
      
      test1.setRegistrationStatus(SMSTollFreeCampaign.RegistrationStatusEnum.UNREGISTERED);
        
        
      test1.setDateCreated("TS");
      
        
        
      test1.setDateUpdated("TS");
      
      test1.setRevision(1);
      
      int hashCode1 = test1.hashCode();
      Assert.assertTrue(Integer.class.isInstance(hashCode1));
    }

    /**
     * Test the method 'toStringEquals'
     */

     @Test
    public void toStringEqualsTest() {
      SMSTollFreeCampaign test1 = new SMSTollFreeCampaign();
        
        
      test1.setAccountId("TS");
      
        
        
      test1.setCampaignId("TS");
      
        
        
      test1.setUseCase("TS");
      
      test1.setRegistrationStatus(SMSTollFreeCampaign.RegistrationStatusEnum.UNREGISTERED);
        
        
      test1.setDateCreated("TS");
      
        
        
      test1.setDateUpdated("TS");
      
      test1.setRevision(1);
      SMSTollFreeCampaign test2 = new SMSTollFreeCampaign();
        
        
      test2.setAccountId("TS");
      
        
        
      test2.setCampaignId("TS");
      
        
        
      test2.setUseCase("TS");
      
      test2.setRegistrationStatus(SMSTollFreeCampaign.RegistrationStatusEnum.UNREGISTERED);
        
        
      test2.setDateCreated("TS");
      
        
        
      test2.setDateUpdated("TS");
      
      test2.setRevision(1);
        
      String toString1 = test1.toString();
      String toString2 = test2.toString();
      Assert.assertEquals(toString1, toString2);
    }

    /**
     * Test the method 'hashCodeEqualsTrue'
     */

    @Test
    public void hashCodeEqualsTrueTest() {
      SMSTollFreeCampaign test1 = new SMSTollFreeCampaign();
        
        
      test1.setAccountId("TS");
      
        
        
      test1.setCampaignId("TS");
      
        
        
      test1.setUseCase("TS");
      
      test1.setRegistrationStatus(SMSTollFreeCampaign.RegistrationStatusEnum.UNREGISTERED);
        
        
      test1.setDateCreated("TS");
      
        
        
      test1.setDateUpdated("TS");
      
      test1.setRevision(1);
      SMSTollFreeCampaign test2 = new SMSTollFreeCampaign();
        
        
      test2.setAccountId("TS");
      
        
        
      test2.setCampaignId("TS");
      
        
        
      test2.setUseCase("TS");
      
      test2.setRegistrationStatus(SMSTollFreeCampaign.RegistrationStatusEnum.UNREGISTERED);
        
        
      test2.setDateCreated("TS");
      
        
        
      test2.setDateUpdated("TS");
      
      test2.setRevision(1);
      Assert.assertEquals(test1.hashCode(), test2.hashCode());
    }

    /**
     * Test the method 'hashCodeEqualsFalse'
     */

    @Test
    public void hashCodeEqualsFalseTest() {
      SMSTollFreeCampaign test1 = new SMSTollFreeCampaign();
        
        
      test1.setAccountId("TS");
      
        
        
      test1.setCampaignId("TS");
      
        
        
      test1.setUseCase("TS");
      
      test1.setRegistrationStatus(SMSTollFreeCampaign.RegistrationStatusEnum.INITIATED);
        
        
      test1.setDateCreated("TS");
      
        
        
      test1.setDateUpdated("TS");
      
      test1.setRevision(1);
      SMSTollFreeCampaign test2 = new SMSTollFreeCampaign();
        
        
      test2.setAccountId("TS2");
      
        
        
      test2.setCampaignId("TS2");
      
        
        
      test2.setUseCase("TS2");
      
      test2.setRegistrationStatus(SMSTollFreeCampaign.RegistrationStatusEnum.UNREGISTERED);
        
        
      test2.setDateCreated("TS2");
      
        
        
      test2.setDateUpdated("TS2");
      
      test2.setRevision(0);
      Assert.assertNotEquals(test1.hashCode(), test2.hashCode());
    }

     /**
     * Test the method 'toStringType'
     */

     @Test
    public void toStringTypeTest() {
      SMSTollFreeCampaign test1 = new SMSTollFreeCampaign();
        
        
        test1.setAccountId("TS");
      
        
        
        test1.setCampaignId("TS");
      
        
        
        test1.setUseCase("TS");
      
      test1.setRegistrationStatus(SMSTollFreeCampaign.RegistrationStatusEnum.UNREGISTERED);
        
        
        test1.setDateCreated("TS");
      
        
        
        test1.setDateUpdated("TS");
      
      test1.setRevision(1);

      String toString1 = test1.toString();
      Assert.assertTrue(String.class.isInstance(toString1));
    }

 }