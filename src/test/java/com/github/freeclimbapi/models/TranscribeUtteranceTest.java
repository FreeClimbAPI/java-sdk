/*
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.github.freeclimbapi;

import com.github.freeclimbapi.enums.*;
import com.github.freeclimbapi.models.*;
import java.net.URI;
import java.util.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.junit.Assert;
import org.junit.Test;

/** Model tests for TranscribeUtterance */
public class TranscribeUtteranceTest {

    private final TranscribeUtterance model = new TranscribeUtterance();

    /** Test the property 'actionUrl' */
    @Test
    public void actionUrlTest() {

        try {
            URI uri = new URI("TEST_STRING");
            model.setActionUrl(uri);
            Assert.assertEquals(uri, model.getActionUrl());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /** Test the property 'playBeep' */
    @Test
    public void playBeepTest() {
        model.setPlayBeep(false);
        Assert.assertEquals(false, model.getPlayBeep());
    }

    /** Test the property 'record' */
    @Test
    public void recordTest() {
        TranscribeUtteranceRecord object = new TranscribeUtteranceRecord();
        model.setRecord(object);
        Assert.assertEquals(object.getClass(), TranscribeUtteranceRecord.class);
    }

    /** Test the property 'privacyForLogging' */
    @Test
    public void privacyForLoggingTest() {
        model.setPrivacyForLogging(false);
        Assert.assertEquals(false, model.getPrivacyForLogging());
    }

    /** Test the property 'privacyForRecording' */
    @Test
    public void privacyForRecordingTest() {
        model.setPrivacyForRecording(false);
        Assert.assertEquals(false, model.getPrivacyForRecording());
    }

    /** Test the property 'prompts' */
    @Test
    public void promptsTest() {

        List<PerclCommand> testList = new ArrayList<PerclCommand>();
        model.setPrompts(testList);
        Assert.assertEquals(testList, model.getPrompts());
    }

    /** Test the method 'equalsTrue' */
    @Test
    public void equalsTrueTest() {
        TranscribeUtterance test1 = new TranscribeUtterance();

        try {
            URI uri1 = new URI("TEST_STRING");
            test1.setActionUrl(uri1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        ;
        test1.setPlayBeep(true);
        TranscribeUtteranceRecord TranscribeUtteranceRecordobject = new TranscribeUtteranceRecord();
        test1.setRecord(TranscribeUtteranceRecordobject);
        test1.setPrivacyForLogging(true);
        test1.setPrivacyForRecording(true);
        List<PerclCommand> testList = new ArrayList<PerclCommand>();
        test1.setPrompts(testList);
        TranscribeUtterance test2 = new TranscribeUtterance();

        try {
            URI uri2 = new URI("TEST_STRING");
            test2.setActionUrl(uri2);
        } catch (Exception e) {
            e.printStackTrace();
        }
        ;
        test2.setPlayBeep(true);
        TranscribeUtteranceRecord TranscribeUtteranceRecordobject2 =
                TranscribeUtteranceRecordobject;
        test2.setRecord(TranscribeUtteranceRecordobject2);
        test2.setPrivacyForLogging(true);
        test2.setPrivacyForRecording(true);
        List<PerclCommand> testList2 = testList;
        test2.setPrompts(testList2);

        Assert.assertTrue(test1.equals(test2));
    }

    /** Test the method 'equalsFalse' */
    @Test
    public void equalsFalseTest() {
        TranscribeUtterance test1 = new TranscribeUtterance();

        try {
            URI uri1 = new URI("TEST_STRING");
            test1.setActionUrl(uri1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        ;
        test1.setPlayBeep(true);
        TranscribeUtteranceRecord TranscribeUtteranceRecordobject = new TranscribeUtteranceRecord();
        test1.setRecord(TranscribeUtteranceRecordobject);
        test1.setPrivacyForLogging(true);
        test1.setPrivacyForRecording(true);
        List<PerclCommand> testList = new ArrayList<PerclCommand>();
        test1.setPrompts(testList);
        TranscribeUtterance test2 = new TranscribeUtterance();

        try {
            URI uri2 = new URI("TEST_STRING2");
            test2.setActionUrl(uri2);
        } catch (Exception e) {
            e.printStackTrace();
        }
        ;
        test2.setPlayBeep(false);
        TranscribeUtteranceRecord TranscribeUtteranceRecordobject2 =
                new TranscribeUtteranceRecord();
        test2.setRecord(TranscribeUtteranceRecordobject2);
        test2.setPrivacyForLogging(false);
        test2.setPrivacyForRecording(false);
        List<PerclCommand> testList2 = null;
        test2.setPrompts(testList2);

        Assert.assertFalse(test1.equals(test2));
    }

    /** Test the method 'hashCodeType' */
    @Test
    public void hashCodeTypeTest() {
        TranscribeUtterance test1 = new TranscribeUtterance();

        try {
            URI uri1 = new URI("TEST_STRING");
            test1.setActionUrl(uri1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        ;
        test1.setPlayBeep(true);
        TranscribeUtteranceRecord TranscribeUtteranceRecordobject = new TranscribeUtteranceRecord();
        test1.setRecord(TranscribeUtteranceRecordobject);
        test1.setPrivacyForLogging(true);
        test1.setPrivacyForRecording(true);
        List<PerclCommand> testList = new ArrayList<PerclCommand>();
        test1.setPrompts(testList);

        int hashCode1 = test1.hashCode();
        Assert.assertTrue(Integer.class.isInstance(hashCode1));
    }

    /** Test the method 'toStringEquals' */
    @Test
    public void toStringEqualsTest() {
        TranscribeUtterance test1 = new TranscribeUtterance();

        try {
            URI uri1 = new URI("TEST_STRING");
            test1.setActionUrl(uri1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        ;
        test1.setPlayBeep(true);
        TranscribeUtteranceRecord TranscribeUtteranceRecordobject = new TranscribeUtteranceRecord();
        test1.setRecord(TranscribeUtteranceRecordobject);
        test1.setPrivacyForLogging(true);
        test1.setPrivacyForRecording(true);
        List<PerclCommand> testList = new ArrayList<PerclCommand>();
        test1.setPrompts(testList);
        TranscribeUtterance test2 = new TranscribeUtterance();

        try {
            URI uri2 = new URI("TEST_STRING");
            test2.setActionUrl(uri2);
        } catch (Exception e) {
            e.printStackTrace();
        }
        ;
        test2.setPlayBeep(true);
        TranscribeUtteranceRecord TranscribeUtteranceRecordobject2 =
                TranscribeUtteranceRecordobject;
        test2.setRecord(TranscribeUtteranceRecordobject2);
        test2.setPrivacyForLogging(true);
        test2.setPrivacyForRecording(true);
        List<PerclCommand> testList2 = testList;
        test2.setPrompts(testList2);

        String toString1 = test1.toString();
        String toString2 = test2.toString();
        Assert.assertEquals(toString1, toString2);
    }

    /** Test the method 'hashCodeEqualsTrue' */
    @Test
    public void hashCodeEqualsTrueTest() {
        TranscribeUtterance test1 = new TranscribeUtterance();

        try {
            URI uri1 = new URI("TEST_STRING");
            test1.setActionUrl(uri1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        ;
        test1.setPlayBeep(true);
        TranscribeUtteranceRecord TranscribeUtteranceRecordobject = new TranscribeUtteranceRecord();
        test1.setRecord(TranscribeUtteranceRecordobject);
        test1.setPrivacyForLogging(true);
        test1.setPrivacyForRecording(true);
        List<PerclCommand> testList = new ArrayList<PerclCommand>();
        test1.setPrompts(testList);
        TranscribeUtterance test2 = new TranscribeUtterance();

        try {
            URI uri2 = new URI("TEST_STRING");
            test2.setActionUrl(uri2);
        } catch (Exception e) {
            e.printStackTrace();
        }
        ;
        test2.setPlayBeep(true);
        TranscribeUtteranceRecord TranscribeUtteranceRecordobject2 =
                TranscribeUtteranceRecordobject;
        test2.setRecord(TranscribeUtteranceRecordobject2);
        test2.setPrivacyForLogging(true);
        test2.setPrivacyForRecording(true);
        List<PerclCommand> testList2 = testList;
        test2.setPrompts(testList2);
        Assert.assertEquals(test1.hashCode(), test2.hashCode());
    }

    /** Test the method 'hashCodeEqualsFalse' */
    @Test
    public void hashCodeEqualsFalseTest() {
        TranscribeUtterance test1 = new TranscribeUtterance();

        try {
            URI uri1 = new URI("TEST_STRING");
            test1.setActionUrl(uri1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        ;
        test1.setPlayBeep(true);
        TranscribeUtteranceRecord TranscribeUtteranceRecordobject = new TranscribeUtteranceRecord();
        test1.setRecord(TranscribeUtteranceRecordobject);
        test1.setPrivacyForLogging(true);
        test1.setPrivacyForRecording(true);
        List<PerclCommand> testList = new ArrayList<PerclCommand>();
        test1.setPrompts(testList);
        TranscribeUtterance test2 = new TranscribeUtterance();

        try {
            URI uri2 = new URI("TEST_STRING2");
            test2.setActionUrl(uri2);
        } catch (Exception e) {
            e.printStackTrace();
        }
        ;
        test2.setPlayBeep(false);
        TranscribeUtteranceRecord TranscribeUtteranceRecordobject2 =
                new TranscribeUtteranceRecord();
        test2.setRecord(TranscribeUtteranceRecordobject2);
        test2.setPrivacyForLogging(false);
        test2.setPrivacyForRecording(false);
        List<PerclCommand> testList2 = null;
        test2.setPrompts(testList2);
        Assert.assertNotEquals(test1.hashCode(), test2.hashCode());
    }

    /** Test the method 'toStringType' */
    @Test
    public void toStringTypeTest() {
        TranscribeUtterance test1 = new TranscribeUtterance();

        try {
            URI uri1 = new URI("TEST_STRING");
            test1.setActionUrl(uri1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        ;
        test1.setPlayBeep(true);
        TranscribeUtteranceRecord TranscribeUtteranceRecordobject = new TranscribeUtteranceRecord();
        test1.setRecord(TranscribeUtteranceRecordobject);
        test1.setPrivacyForLogging(true);
        test1.setPrivacyForRecording(true);
        List<PerclCommand> testList = new ArrayList<PerclCommand>();
        test1.setPrompts(testList);

        String toString1 = test1.toString();
        Assert.assertTrue(String.class.isInstance(toString1));
    }

    @Test
    public void commandTest() throws Exception {
        Assert.assertEquals("TranscribeUtterance", model.getCommand());
    }

    @Test
    public void buildTest() throws Exception {

        try {
            URI uri = new URI("TEST_STRING");
            model.setActionUrl(uri);
            Assert.assertEquals(uri, model.getActionUrl());
        } catch (Exception e) {
            e.printStackTrace();
        }
        model.setPlayBeep(false);
        model.setPrivacyForLogging(false);
        model.setPrivacyForRecording(false);
        Map<String, Map<String, Object>> build = model.build();
        Map<String, Object> attributes = build.get(model.getCommand());
        Assert.assertEquals(attributes.get("actionUrl"), model.getActionUrl());
        Assert.assertEquals(attributes.get("playBeep"), model.getPlayBeep());
        Assert.assertEquals(attributes.get("record"), model.getRecord());
        Assert.assertEquals(attributes.get("privacyForLogging"), model.getPrivacyForLogging());
        Assert.assertEquals(attributes.get("privacyForRecording"), model.getPrivacyForRecording());
        Assert.assertEquals(attributes.get("prompts"), model.getPrompts());
    }
}
