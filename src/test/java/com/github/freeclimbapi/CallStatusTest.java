/*
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.freeclimbapi;

import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.LocalDate;

import java.util.*;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.File;
import java.math.BigDecimal;
import java.net.URI;
import java.net.URISyntaxException;
import com.github.freeclimbapi.enums.*;
import com.github.freeclimbapi.models.*;

/**
 * Model tests for CallStatus
 */
 public class CallStatusTest {
  @Test
    public void testQUEUEDShouldWork() {

        CallStatus test = CallStatus.QUEUED;
         Assert.assertEquals(test.getClass(), CallStatus.class);
    }

    @Test 
    public void testQUEUEDShouldSerializeToEnum() {
    
        CallStatus expectedValue = CallStatus.QUEUED;
        CallStatus calculatedValue = CallStatus.fromValue("queued");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testQUEUEDShouldDeserializeToString() {
     CallStatus test = CallStatus.QUEUED;
      String expectedValue = "queued";
      String calculatedValue = test.toString();
      Assert.assertEquals(expectedValue, calculatedValue);
    }
  @Test
    public void testRINGINGShouldWork() {

        CallStatus test = CallStatus.RINGING;
         Assert.assertEquals(test.getClass(), CallStatus.class);
    }

    @Test 
    public void testRINGINGShouldSerializeToEnum() {
    
        CallStatus expectedValue = CallStatus.RINGING;
        CallStatus calculatedValue = CallStatus.fromValue("ringing");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testRINGINGShouldDeserializeToString() {
     CallStatus test = CallStatus.RINGING;
      String expectedValue = "ringing";
      String calculatedValue = test.toString();
      Assert.assertEquals(expectedValue, calculatedValue);
    }
  @Test
    public void testIN_PROGRESSShouldWork() {

        CallStatus test = CallStatus.IN_PROGRESS;
         Assert.assertEquals(test.getClass(), CallStatus.class);
    }

    @Test 
    public void testIN_PROGRESSShouldSerializeToEnum() {
    
        CallStatus expectedValue = CallStatus.IN_PROGRESS;
        CallStatus calculatedValue = CallStatus.fromValue("inProgress");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testIN_PROGRESSShouldDeserializeToString() {
     CallStatus test = CallStatus.IN_PROGRESS;
      String expectedValue = "inProgress";
      String calculatedValue = test.toString();
      Assert.assertEquals(expectedValue, calculatedValue);
    }
  @Test
    public void testCANCELEDShouldWork() {

        CallStatus test = CallStatus.CANCELED;
         Assert.assertEquals(test.getClass(), CallStatus.class);
    }

    @Test 
    public void testCANCELEDShouldSerializeToEnum() {
    
        CallStatus expectedValue = CallStatus.CANCELED;
        CallStatus calculatedValue = CallStatus.fromValue("canceled");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testCANCELEDShouldDeserializeToString() {
     CallStatus test = CallStatus.CANCELED;
      String expectedValue = "canceled";
      String calculatedValue = test.toString();
      Assert.assertEquals(expectedValue, calculatedValue);
    }
  @Test
    public void testCOMPLETEDShouldWork() {

        CallStatus test = CallStatus.COMPLETED;
         Assert.assertEquals(test.getClass(), CallStatus.class);
    }

    @Test 
    public void testCOMPLETEDShouldSerializeToEnum() {
    
        CallStatus expectedValue = CallStatus.COMPLETED;
        CallStatus calculatedValue = CallStatus.fromValue("completed");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testCOMPLETEDShouldDeserializeToString() {
     CallStatus test = CallStatus.COMPLETED;
      String expectedValue = "completed";
      String calculatedValue = test.toString();
      Assert.assertEquals(expectedValue, calculatedValue);
    }
  @Test
    public void testFAILEDShouldWork() {

        CallStatus test = CallStatus.FAILED;
         Assert.assertEquals(test.getClass(), CallStatus.class);
    }

    @Test 
    public void testFAILEDShouldSerializeToEnum() {
    
        CallStatus expectedValue = CallStatus.FAILED;
        CallStatus calculatedValue = CallStatus.fromValue("failed");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testFAILEDShouldDeserializeToString() {
     CallStatus test = CallStatus.FAILED;
      String expectedValue = "failed";
      String calculatedValue = test.toString();
      Assert.assertEquals(expectedValue, calculatedValue);
    }
  @Test
    public void testBUSYShouldWork() {

        CallStatus test = CallStatus.BUSY;
         Assert.assertEquals(test.getClass(), CallStatus.class);
    }

    @Test 
    public void testBUSYShouldSerializeToEnum() {
    
        CallStatus expectedValue = CallStatus.BUSY;
        CallStatus calculatedValue = CallStatus.fromValue("busy");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testBUSYShouldDeserializeToString() {
     CallStatus test = CallStatus.BUSY;
      String expectedValue = "busy";
      String calculatedValue = test.toString();
      Assert.assertEquals(expectedValue, calculatedValue);
    }
  @Test
    public void testNO_ANSWERShouldWork() {

        CallStatus test = CallStatus.NO_ANSWER;
         Assert.assertEquals(test.getClass(), CallStatus.class);
    }

    @Test 
    public void testNO_ANSWERShouldSerializeToEnum() {
    
        CallStatus expectedValue = CallStatus.NO_ANSWER;
        CallStatus calculatedValue = CallStatus.fromValue("noAnswer");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testNO_ANSWERShouldDeserializeToString() {
     CallStatus test = CallStatus.NO_ANSWER;
      String expectedValue = "noAnswer";
      String calculatedValue = test.toString();
      Assert.assertEquals(expectedValue, calculatedValue);
    }

 }