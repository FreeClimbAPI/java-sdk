/*
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.freeclimbapi;

import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.LocalDate;

import java.util.*;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.File;
import java.math.BigDecimal;
import java.net.URI;
import java.net.URISyntaxException;
import com.github.freeclimbapi.enums.*;
import com.github.freeclimbapi.models.*;

/**
 * Model tests for TranscribeUtteranceAllOf
 */
 public class TranscribeUtteranceAllOfTest {
    private final TranscribeUtteranceAllOf model = new TranscribeUtteranceAllOf(
    );
    
    
    /**
     * Test the property 'actionUrl'
     */
    @Test
    public void actionUrlTest() {
      
      
      model.setActionUrl("TEST_STRING");
      Assert.assertEquals("TEST_STRING", model.getActionUrl());
      
      
    }
    /**
     * Test the property 'playBeep'
     */
    @Test
    public void playBeepTest() {
      model.setPlayBeep(false);
      Assert.assertEquals(false, model.getPlayBeep());       
      
    }
    /**
     * Test the property 'record'
     */
    @Test
    public void recordTest() {
      TranscribeUtteranceAllOfRecord object = new TranscribeUtteranceAllOfRecord();
      model.setRecord(object);
      Assert.assertEquals(object.getClass(), TranscribeUtteranceAllOfRecord.class);
      
    }
    /**
     * Test the property 'privacyForLogging'
     */
    @Test
    public void privacyForLoggingTest() {
      model.setPrivacyForLogging(false);
      Assert.assertEquals(false, model.getPrivacyForLogging());       
      
    }
    /**
     * Test the property 'privacyForRecording'
     */
    @Test
    public void privacyForRecordingTest() {
      model.setPrivacyForRecording(false);
      Assert.assertEquals(false, model.getPrivacyForRecording());       
      
    }
    /**
     * Test the property 'prompts'
     */
    @Test
    public void promptsTest() {
      
      List<Object> testList = new ArrayList<Object>();
      model.setPrompts(testList);
      Assert.assertEquals(testList, model.getPrompts()); 
    }

      /**
     * Test the method 'equalsTrue'
     */

     @Test
    public void equalsTrueTest() {
      TranscribeUtteranceAllOf test1 = new TranscribeUtteranceAllOf();
        
        
      test1.setActionUrl("TS");
      
      test1.setPlayBeep(true);
      TranscribeUtteranceAllOfRecord TranscribeUtteranceAllOfRecordobject = new TranscribeUtteranceAllOfRecord();
      test1.setRecord(TranscribeUtteranceAllOfRecordobject);
      test1.setPrivacyForLogging(true);
      test1.setPrivacyForRecording(true);
      List<Object> testList = new ArrayList<Object>();
      test1.setPrompts(testList);
      TranscribeUtteranceAllOf test2 = new TranscribeUtteranceAllOf();
        
        
      test2.setActionUrl("TS");
      
      test2.setPlayBeep(true);
      TranscribeUtteranceAllOfRecord TranscribeUtteranceAllOfRecordobject2 = TranscribeUtteranceAllOfRecordobject;
      test2.setRecord(TranscribeUtteranceAllOfRecordobject2);
      test2.setPrivacyForLogging(true);
      test2.setPrivacyForRecording(true);
      List<Object> testList2 = testList;
      test2.setPrompts(testList2);

      Assert.assertTrue(test1.equals(test2));
    }

    /**
     * Test the method 'equalsFalse'
     */

     @Test
    public void equalsFalseTest() {
      TranscribeUtteranceAllOf test1 = new TranscribeUtteranceAllOf();
        
        
      test1.setActionUrl("TS");
      
      test1.setPlayBeep(true);
        TranscribeUtteranceAllOfRecord TranscribeUtteranceAllOfRecordobject = new TranscribeUtteranceAllOfRecord();
      test1.setRecord(TranscribeUtteranceAllOfRecordobject);
      test1.setPrivacyForLogging(true);
      test1.setPrivacyForRecording(true);
      List<Object> testList = new ArrayList<Object>();
      test1.setPrompts(testList);
      TranscribeUtteranceAllOf test2 = new TranscribeUtteranceAllOf();
        
        
      test2.setActionUrl("TS2");
      
      test2.setPlayBeep(false);
      TranscribeUtteranceAllOfRecord TranscribeUtteranceAllOfRecordobject2 = new TranscribeUtteranceAllOfRecord();
      test2.setRecord(TranscribeUtteranceAllOfRecordobject2);
      test2.setPrivacyForLogging(false);
      test2.setPrivacyForRecording(false);
      List<Object> testList2 = null;
      test2.setPrompts(testList2);

      Assert.assertFalse(test1.equals(test2));
    }
    
    /**
     * Test the method 'hashCodeType'
     */

     @Test
    public void hashCodeTypeTest() {
      TranscribeUtteranceAllOf test1 = new TranscribeUtteranceAllOf();
        
        
      test1.setActionUrl("TS");
      
      test1.setPlayBeep(true);
      TranscribeUtteranceAllOfRecord TranscribeUtteranceAllOfRecordobject = new TranscribeUtteranceAllOfRecord();
      test1.setRecord(TranscribeUtteranceAllOfRecordobject);
      test1.setPrivacyForLogging(true);
      test1.setPrivacyForRecording(true);
      List<Object> testList = new ArrayList<Object>();
      test1.setPrompts(testList);
      
      int hashCode1 = test1.hashCode();
      Assert.assertTrue(Integer.class.isInstance(hashCode1));
    }

    /**
     * Test the method 'toStringEquals'
     */

     @Test
    public void toStringEqualsTest() {
      TranscribeUtteranceAllOf test1 = new TranscribeUtteranceAllOf();
        
        
      test1.setActionUrl("TS");
      
      test1.setPlayBeep(true);
        TranscribeUtteranceAllOfRecord TranscribeUtteranceAllOfRecordobject = new TranscribeUtteranceAllOfRecord();
      test1.setRecord(TranscribeUtteranceAllOfRecordobject);
      test1.setPrivacyForLogging(true);
      test1.setPrivacyForRecording(true);
      List<Object> testList = new ArrayList<Object>();
      test1.setPrompts(testList);
      TranscribeUtteranceAllOf test2 = new TranscribeUtteranceAllOf();
        
        
      test2.setActionUrl("TS");
      
      test2.setPlayBeep(true);
      TranscribeUtteranceAllOfRecord TranscribeUtteranceAllOfRecordobject2 = TranscribeUtteranceAllOfRecordobject;
      test2.setRecord(TranscribeUtteranceAllOfRecordobject2);
      test2.setPrivacyForLogging(true);
      test2.setPrivacyForRecording(true);
      List<Object> testList2 = testList;
      test2.setPrompts(testList2);
        
      String toString1 = test1.toString();
      String toString2 = test2.toString();
      Assert.assertEquals(toString1, toString2);
    }

    /**
     * Test the method 'hashCodeEqualsTrue'
     */

    @Test
    public void hashCodeEqualsTrueTest() {
      TranscribeUtteranceAllOf test1 = new TranscribeUtteranceAllOf();
        
        
      test1.setActionUrl("TS");
      
      test1.setPlayBeep(true);
        TranscribeUtteranceAllOfRecord TranscribeUtteranceAllOfRecordobject = new TranscribeUtteranceAllOfRecord();
      test1.setRecord(TranscribeUtteranceAllOfRecordobject);
      test1.setPrivacyForLogging(true);
      test1.setPrivacyForRecording(true);
      List<Object> testList = new ArrayList<Object>();
      test1.setPrompts(testList);
      TranscribeUtteranceAllOf test2 = new TranscribeUtteranceAllOf();
        
        
      test2.setActionUrl("TS");
      
      test2.setPlayBeep(true);
      TranscribeUtteranceAllOfRecord TranscribeUtteranceAllOfRecordobject2 = TranscribeUtteranceAllOfRecordobject;
      test2.setRecord(TranscribeUtteranceAllOfRecordobject2);
      test2.setPrivacyForLogging(true);
      test2.setPrivacyForRecording(true);
      List<Object> testList2 = testList;
      test2.setPrompts(testList2);
      Assert.assertEquals(test1.hashCode(), test2.hashCode());
    }

    /**
     * Test the method 'hashCodeEqualsFalse'
     */

    @Test
    public void hashCodeEqualsFalseTest() {
      TranscribeUtteranceAllOf test1 = new TranscribeUtteranceAllOf();
        
        
      test1.setActionUrl("TS");
      
      test1.setPlayBeep(true);
        TranscribeUtteranceAllOfRecord TranscribeUtteranceAllOfRecordobject = new TranscribeUtteranceAllOfRecord();
      test1.setRecord(TranscribeUtteranceAllOfRecordobject);
      test1.setPrivacyForLogging(true);
      test1.setPrivacyForRecording(true);
      List<Object> testList = new ArrayList<Object>();
      test1.setPrompts(testList);
      TranscribeUtteranceAllOf test2 = new TranscribeUtteranceAllOf();
        
        
      test2.setActionUrl("TS2");
      
      test2.setPlayBeep(false);
      TranscribeUtteranceAllOfRecord TranscribeUtteranceAllOfRecordobject2 = new TranscribeUtteranceAllOfRecord();
      test2.setRecord(TranscribeUtteranceAllOfRecordobject2);
      test2.setPrivacyForLogging(false);
      test2.setPrivacyForRecording(false);
      List<Object> testList2 = null;
      test2.setPrompts(testList2);
      Assert.assertNotEquals(test1.hashCode(), test2.hashCode());
    }

     /**
     * Test the method 'toStringType'
     */

     @Test
    public void toStringTypeTest() {
      TranscribeUtteranceAllOf test1 = new TranscribeUtteranceAllOf();
        
        
        test1.setActionUrl("TS");
      
      test1.setPlayBeep(true);
      TranscribeUtteranceAllOfRecord TranscribeUtteranceAllOfRecordobject = new TranscribeUtteranceAllOfRecord();
      test1.setRecord(TranscribeUtteranceAllOfRecordobject);
      test1.setPrivacyForLogging(true);
      test1.setPrivacyForRecording(true);
      List<Object> testList = new ArrayList<Object>();
      test1.setPrompts(testList);

      String toString1 = test1.toString();
      Assert.assertTrue(String.class.isInstance(toString1));
    }

 }