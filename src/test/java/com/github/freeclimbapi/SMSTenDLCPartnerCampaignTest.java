/*
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.freeclimbapi;

import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.LocalDate;

import java.util.*;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.File;
import java.math.BigDecimal;
import java.net.URI;
import java.net.URISyntaxException;
import com.github.freeclimbapi.enums.*;
import com.github.freeclimbapi.models.*;

/**
 * Model tests for SMSTenDLCPartnerCampaign
 */
 public class SMSTenDLCPartnerCampaignTest {
    private final SMSTenDLCPartnerCampaign model = new SMSTenDLCPartnerCampaign();

    /**
     * Test the property 'accountId'
     */
    @Test
    public void accountIdTest() {
      
        
        model.setAccountId("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getAccountId());
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'campaignId'
     */
    @Test
    public void campaignIdTest() {
      
        
        model.setCampaignId("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getCampaignId());
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
      
  
    model.setStatus(SMSTenDLCPartnerCampaign.StatusEnum.ACTIVE);
    Assert.assertEquals(model.getStatus(),SMSTenDLCPartnerCampaign.StatusEnum.ACTIVE);
  
    model.setStatus(SMSTenDLCPartnerCampaign.StatusEnum.EXPIRED);
    Assert.assertEquals(model.getStatus(),SMSTenDLCPartnerCampaign.StatusEnum.EXPIRED);
  

  }


    /**
     * Test the property 'createDate'
     */
    @Test
    public void createDateTest() {
      
        
          model.setCreateDate(OffsetDateTime.parse("2022-07-05T15:17:05Z"));
          Assert.assertEquals(OffsetDateTime.parse("2022-07-05T15:17:05Z"), model.getCreateDate());

        
        
        
        

      
  

  }


    /**
     * Test the property 'brandId'
     */
    @Test
    public void brandIdTest() {
      
        
        model.setBrandId("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getBrandId());
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'usecase'
     */
    @Test
    public void usecaseTest() {
      
        
        model.setUsecase("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getUsecase());
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
      
        
        model.setDescription("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getDescription());
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'embeddedLink'
     */
    @Test
    public void embeddedLinkTest() {
      
        model.setEmbeddedLink(false);
        Assert.assertEquals(false, model.getEmbeddedLink());       
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'embeddedPhone'
     */
    @Test
    public void embeddedPhoneTest() {
      
        model.setEmbeddedPhone(false);
        Assert.assertEquals(false, model.getEmbeddedPhone());       
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'affiliateMarketing'
     */
    @Test
    public void affiliateMarketingTest() {
      
        model.setAffiliateMarketing(false);
        Assert.assertEquals(false, model.getAffiliateMarketing());       
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'numberPool'
     */
    @Test
    public void numberPoolTest() {
      
        model.setNumberPool(false);
        Assert.assertEquals(false, model.getNumberPool());       
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'ageGated'
     */
    @Test
    public void ageGatedTest() {
      
        model.setAgeGated(false);
        Assert.assertEquals(false, model.getAgeGated());       
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'directLending'
     */
    @Test
    public void directLendingTest() {
      
        model.setDirectLending(false);
        Assert.assertEquals(false, model.getDirectLending());       
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'subscriberOptin'
     */
    @Test
    public void subscriberOptinTest() {
      
        model.setSubscriberOptin(false);
        Assert.assertEquals(false, model.getSubscriberOptin());       
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'subscriberOptout'
     */
    @Test
    public void subscriberOptoutTest() {
      
        model.setSubscriberOptout(false);
        Assert.assertEquals(false, model.getSubscriberOptout());       
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'subscriberHelp'
     */
    @Test
    public void subscriberHelpTest() {
      
        model.setSubscriberHelp(false);
        Assert.assertEquals(false, model.getSubscriberHelp());       
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'sample1'
     */
    @Test
    public void sample1Test() {
      
        
        model.setSample1("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getSample1());
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'sample2'
     */
    @Test
    public void sample2Test() {
      
        
        model.setSample2("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getSample2());
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'sample3'
     */
    @Test
    public void sample3Test() {
      
        
        model.setSample3("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getSample3());
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'sample4'
     */
    @Test
    public void sample4Test() {
      
        
        model.setSample4("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getSample4());
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'sample5'
     */
    @Test
    public void sample5Test() {
      
        
        model.setSample5("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getSample5());
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'messageFlow'
     */
    @Test
    public void messageFlowTest() {
      
        
        model.setMessageFlow("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getMessageFlow());
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'helpMessage'
     */
    @Test
    public void helpMessageTest() {
      
        
        model.setHelpMessage("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getHelpMessage());
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'optinKeywords'
     */
    @Test
    public void optinKeywordsTest() {
      
        
        model.setOptinKeywords("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getOptinKeywords());
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'optoutKeywords'
     */
    @Test
    public void optoutKeywordsTest() {
      
        
        model.setOptoutKeywords("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getOptoutKeywords());
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'helpKeywords'
     */
    @Test
    public void helpKeywordsTest() {
      
        
        model.setHelpKeywords("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getHelpKeywords());
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'optinMessage'
     */
    @Test
    public void optinMessageTest() {
      
        
        model.setOptinMessage("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getOptinMessage());
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'optoutMessage'
     */
    @Test
    public void optoutMessageTest() {
      
        
        model.setOptoutMessage("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getOptoutMessage());
        

        
        
        
        

      
  

  }


    /**
     * Test the property 'brand'
     */
    @Test
    public void brandTest() {
      
        
        SMSTenDLCPartnerCampaignBrand object = new SMSTenDLCPartnerCampaignBrand();
          model.setBrand(object);
          Assert.assertEquals(object.getClass(), SMSTenDLCPartnerCampaignBrand.class);

        
        
        
        

      
  

  }





 }