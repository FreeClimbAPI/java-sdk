/*
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.freeclimbapi;

import com.github.freeclimbapi.PerclCommand;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Model tests for GetDigitsAllOf
 */
public class GetDigitsAllOfTest {
    private final GetDigitsAllOf model = new GetDigitsAllOf();
    /**
     * Test the property 'actionUrl'
     */
    @Test
    public void actionUrlTest() {

        model.setActionUrl("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getActionUrl());
        
        
    }

    /**
     * Test the property 'digitTimeoutMs'
     */
    @Test
    public void digitTimeoutMsTest() {

        
    }

    /**
     * Test the property 'finishOnKey'
     */
    @Test
    public void finishOnKeyTest() {

        model.setFinishOnKey("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getFinishOnKey());
        
        
    }

    /**
     * Test the property 'flushBuffer'
     */
    @Test
    public void flushBufferTest() {
        model.setFlushBuffer(false);
        Assert.assertEquals(false, model.getFlushBuffer());
        
        
    }

    /**
     * Test the property 'initialTimeoutMs'
     */
    @Test
    public void initialTimeoutMsTest() {

        model.setInitialTimeoutMs("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getInitialTimeoutMs());
        
        
    }

    /**
     * Test the property 'maxDigits'
     */
    @Test
    public void maxDigitsTest() {

        
    }

    /**
     * Test the property 'minDigits'
     */
    @Test
    public void minDigitsTest() {

        
    }

    /**
     * Test the property 'prompts'
     */
    @Test
    public void promptsTest() {

        
    }

    /**
     * Test the property 'privacyMode'
     */
    @Test
    public void privacyModeTest() {
        model.setPrivacyMode(false);
        Assert.assertEquals(false, model.getPrivacyMode());
        
        
    }

}
