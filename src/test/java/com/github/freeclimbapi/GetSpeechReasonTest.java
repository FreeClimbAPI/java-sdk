/*
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.freeclimbapi;

import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.LocalDate;

import java.util.*;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.File;
import java.math.BigDecimal;
import java.net.URI;
import java.net.URISyntaxException;
import com.github.freeclimbapi.enums.*;
import com.github.freeclimbapi.models.*;

/**
 * Model tests for GetSpeechReason
 */
 public class GetSpeechReasonTest {
    @Test
    public void testERRORShouldWork() {

        GetSpeechReason test = GetSpeechReason.ERROR;
         Assert.assertEquals(test.getClass(), GetSpeechReason.class);
    }

    @Test 
    public void testERRORShouldSerializeToEnum() {
    
        GetSpeechReason expectedValue = GetSpeechReason.ERROR;
        GetSpeechReason calculatedValue = GetSpeechReason.fromValue("error");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testERRORShouldDeserializeToString() {
     GetSpeechReason test = GetSpeechReason.ERROR;
      String expectedValue = "error";
      String calculatedValue = test.toString();
      Assert.assertEquals(expectedValue, calculatedValue);
    }
        @Test
    public void testHANGUPShouldWork() {

        GetSpeechReason test = GetSpeechReason.HANGUP;
         Assert.assertEquals(test.getClass(), GetSpeechReason.class);
    }

    @Test 
    public void testHANGUPShouldSerializeToEnum() {
    
        GetSpeechReason expectedValue = GetSpeechReason.HANGUP;
        GetSpeechReason calculatedValue = GetSpeechReason.fromValue("hangup");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testHANGUPShouldDeserializeToString() {
     GetSpeechReason test = GetSpeechReason.HANGUP;
      String expectedValue = "hangup";
      String calculatedValue = test.toString();
      Assert.assertEquals(expectedValue, calculatedValue);
    }
        @Test
    public void testDIGITShouldWork() {

        GetSpeechReason test = GetSpeechReason.DIGIT;
         Assert.assertEquals(test.getClass(), GetSpeechReason.class);
    }

    @Test 
    public void testDIGITShouldSerializeToEnum() {
    
        GetSpeechReason expectedValue = GetSpeechReason.DIGIT;
        GetSpeechReason calculatedValue = GetSpeechReason.fromValue("digit");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testDIGITShouldDeserializeToString() {
     GetSpeechReason test = GetSpeechReason.DIGIT;
      String expectedValue = "digit";
      String calculatedValue = test.toString();
      Assert.assertEquals(expectedValue, calculatedValue);
    }
        @Test
    public void testNO_INPUTShouldWork() {

        GetSpeechReason test = GetSpeechReason.NO_INPUT;
         Assert.assertEquals(test.getClass(), GetSpeechReason.class);
    }

    @Test 
    public void testNO_INPUTShouldSerializeToEnum() {
    
        GetSpeechReason expectedValue = GetSpeechReason.NO_INPUT;
        GetSpeechReason calculatedValue = GetSpeechReason.fromValue("noInput");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testNO_INPUTShouldDeserializeToString() {
     GetSpeechReason test = GetSpeechReason.NO_INPUT;
      String expectedValue = "noInput";
      String calculatedValue = test.toString();
      Assert.assertEquals(expectedValue, calculatedValue);
    }
        @Test
    public void testNO_MATCHShouldWork() {

        GetSpeechReason test = GetSpeechReason.NO_MATCH;
         Assert.assertEquals(test.getClass(), GetSpeechReason.class);
    }

    @Test 
    public void testNO_MATCHShouldSerializeToEnum() {
    
        GetSpeechReason expectedValue = GetSpeechReason.NO_MATCH;
        GetSpeechReason calculatedValue = GetSpeechReason.fromValue("noMatch");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testNO_MATCHShouldDeserializeToString() {
     GetSpeechReason test = GetSpeechReason.NO_MATCH;
      String expectedValue = "noMatch";
      String calculatedValue = test.toString();
      Assert.assertEquals(expectedValue, calculatedValue);
    }
        @Test
    public void testRECOGNITIONShouldWork() {

        GetSpeechReason test = GetSpeechReason.RECOGNITION;
         Assert.assertEquals(test.getClass(), GetSpeechReason.class);
    }

    @Test 
    public void testRECOGNITIONShouldSerializeToEnum() {
    
        GetSpeechReason expectedValue = GetSpeechReason.RECOGNITION;
        GetSpeechReason calculatedValue = GetSpeechReason.fromValue("recognition");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testRECOGNITIONShouldDeserializeToString() {
     GetSpeechReason test = GetSpeechReason.RECOGNITION;
      String expectedValue = "recognition";
      String calculatedValue = test.toString();
      Assert.assertEquals(expectedValue, calculatedValue);
    }
    
 }