/*
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.freeclimbapi;

import com.github.freeclimbapi.AddToConference;
import com.github.freeclimbapi.CreateConference;
import com.github.freeclimbapi.Dequeue;
import com.github.freeclimbapi.Enqueue;
import com.github.freeclimbapi.GetDigits;
import com.github.freeclimbapi.GetSpeech;
import com.github.freeclimbapi.GetSpeechAllOf;
import com.github.freeclimbapi.Hangup;
import com.github.freeclimbapi.OutDial;
import com.github.freeclimbapi.Park;
import com.github.freeclimbapi.Pause;
import com.github.freeclimbapi.PerclCommand;
import com.github.freeclimbapi.Play;
import com.github.freeclimbapi.PlayEarlyMedia;
import com.github.freeclimbapi.RecordUtterance;
import com.github.freeclimbapi.Redirect;
import com.github.freeclimbapi.Reject;
import com.github.freeclimbapi.RemoveFromConference;
import com.github.freeclimbapi.Say;
import com.github.freeclimbapi.SendDigits;
import com.github.freeclimbapi.SetListen;
import com.github.freeclimbapi.SetTalk;
import com.github.freeclimbapi.Sms;
import com.github.freeclimbapi.StartRecordCall;
import com.github.freeclimbapi.TerminateConference;
import com.github.freeclimbapi.Unpark;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Model tests for GetSpeech
 */
public class GetSpeechTest {
    private final GetSpeech model = new GetSpeech();
    /**
     * Test the property 'command'
     */
    @Test
    public void commandTest() {

        Assert.assertEquals("GetSpeech", model.getCommand());
    }

    /**
     * Test the property 'actionUrl'
     */
    @Test
    public void actionUrlTest() {

        model.setActionUrl("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getActionUrl());
        
        
    }

    /**
     * Test the property 'grammarType'
     */
    @Test
    public void grammarTypeTest() {

        
    }

    /**
     * Test the property 'grammarFile'
     */
    @Test
    public void grammarFileTest() {

        model.setGrammarFile("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getGrammarFile());
        
        
    }

    /**
     * Test the property 'grammarRule'
     */
    @Test
    public void grammarRuleTest() {
        model.setGrammarRule(false);
        Assert.assertEquals(false, model.getGrammarRule());
        
        
    }

    /**
     * Test the property 'playBeep'
     */
    @Test
    public void playBeepTest() {

        model.setPlayBeep("TEST_STRING");
        Assert.assertEquals("TEST_STRING", model.getPlayBeep());
        
        
    }

    /**
     * Test the property 'prompts'
     */
    @Test
    public void promptsTest() {

        
    }

    /**
     * Test the property 'noInputTimeoutMs'
     */
    @Test
    public void noInputTimeoutMsTest() {

        
    }

    /**
     * Test the property 'recognitionTimeoutMs'
     */
    @Test
    public void recognitionTimeoutMsTest() {

        
    }

    /**
     * Test the property 'confidenceThreshold'
     */
    @Test
    public void confidenceThresholdTest() {

        
        model.setConfidenceThreshold(new BigDecimal(1.0));
        Assert.assertEquals(new BigDecimal(1.0), model.getConfidenceThreshold());
        
    }

    /**
     * Test the property 'sensitivityLevel'
     */
    @Test
    public void sensitivityLevelTest() {

        
        model.setSensitivityLevel(new BigDecimal(1.0));
        Assert.assertEquals(new BigDecimal(1.0), model.getSensitivityLevel());
        
    }

    /**
     * Test the property 'speechCompleteTimeoutMs'
     */
    @Test
    public void speechCompleteTimeoutMsTest() {

        
    }

    /**
     * Test the property 'speechIncompleteTimeoutMs'
     */
    @Test
    public void speechIncompleteTimeoutMsTest() {

        
    }

    /**
     * Test the property 'privacyMode'
     */
    @Test
    public void privacyModeTest() {
        model.setPrivacyMode(false);
        Assert.assertEquals(false, model.getPrivacyMode());
        
        
    }

    @Test
    public void buildTest() throws Exception {
         
        model.setActionUrl("TEST_STRING");     
        model.setGrammarFile("TEST_STRING");  
        model.setGrammarRule(false);   
        model.setPlayBeep("TEST_STRING");          
        model.setConfidenceThreshold(new BigDecimal(1.0));  
        model.setSensitivityLevel(new BigDecimal(1.0));    
        model.setPrivacyMode(false);  
        Map<String, Map<String, Object>> build = model.build();
        Map<String, Object> attributes = build.get(model.getCommand());
        Assert.assertEquals(attributes.get("actionUrl"), model.getActionUrl());
        Assert.assertEquals(attributes.get("grammarType"), model.getGrammarType());
        Assert.assertEquals(attributes.get("grammarFile"), model.getGrammarFile());
        Assert.assertEquals(attributes.get("grammarRule"), model.getGrammarRule());
        Assert.assertEquals(attributes.get("playBeep"), model.getPlayBeep());
        Assert.assertEquals(attributes.get("prompts"), model.getPrompts());
        Assert.assertEquals(attributes.get("noInputTimeoutMs"), model.getNoInputTimeoutMs());
        Assert.assertEquals(attributes.get("recognitionTimeoutMs"), model.getRecognitionTimeoutMs());
        Assert.assertEquals(attributes.get("confidenceThreshold"), model.getConfidenceThreshold());
        Assert.assertEquals(attributes.get("sensitivityLevel"), model.getSensitivityLevel());
        Assert.assertEquals(attributes.get("speechCompleteTimeoutMs"), model.getSpeechCompleteTimeoutMs());
        Assert.assertEquals(attributes.get("speechIncompleteTimeoutMs"), model.getSpeechIncompleteTimeoutMs());
        Assert.assertEquals(attributes.get("privacyMode"), model.getPrivacyMode());
    }
}
