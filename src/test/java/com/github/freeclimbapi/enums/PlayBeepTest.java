/*
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.github.freeclimbapi;

import com.github.freeclimbapi.enums.*;
import com.github.freeclimbapi.models.*;
import java.util.*;
import org.junit.Assert;
import org.junit.Test;

/** Model tests for PlayBeep */
public class PlayBeepTest {

    @Test
    public void testALWAYSShouldWork() {

        PlayBeep test = PlayBeep.ALWAYS;
        Assert.assertEquals(test.getClass(), PlayBeep.class);
    }

    @Test
    public void testALWAYSShouldSerializeToEnum() {

        PlayBeep expectedValue = PlayBeep.ALWAYS;
        PlayBeep calculatedValue = PlayBeep.fromValue("always");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testALWAYSShouldDeserializeToString() {
        PlayBeep test = PlayBeep.ALWAYS;
        String expectedValue = "always";
        String calculatedValue = test.toString();
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testNEVERShouldWork() {

        PlayBeep test = PlayBeep.NEVER;
        Assert.assertEquals(test.getClass(), PlayBeep.class);
    }

    @Test
    public void testNEVERShouldSerializeToEnum() {

        PlayBeep expectedValue = PlayBeep.NEVER;
        PlayBeep calculatedValue = PlayBeep.fromValue("never");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testNEVERShouldDeserializeToString() {
        PlayBeep test = PlayBeep.NEVER;
        String expectedValue = "never";
        String calculatedValue = test.toString();
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testENTRY_ONLYShouldWork() {

        PlayBeep test = PlayBeep.ENTRY_ONLY;
        Assert.assertEquals(test.getClass(), PlayBeep.class);
    }

    @Test
    public void testENTRY_ONLYShouldSerializeToEnum() {

        PlayBeep expectedValue = PlayBeep.ENTRY_ONLY;
        PlayBeep calculatedValue = PlayBeep.fromValue("entryOnly");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testENTRY_ONLYShouldDeserializeToString() {
        PlayBeep test = PlayBeep.ENTRY_ONLY;
        String expectedValue = "entryOnly";
        String calculatedValue = test.toString();
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testEXIT_ONLYShouldWork() {

        PlayBeep test = PlayBeep.EXIT_ONLY;
        Assert.assertEquals(test.getClass(), PlayBeep.class);
    }

    @Test
    public void testEXIT_ONLYShouldSerializeToEnum() {

        PlayBeep expectedValue = PlayBeep.EXIT_ONLY;
        PlayBeep calculatedValue = PlayBeep.fromValue("exitOnly");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testEXIT_ONLYShouldDeserializeToString() {
        PlayBeep test = PlayBeep.EXIT_ONLY;
        String expectedValue = "exitOnly";
        String calculatedValue = test.toString();
        Assert.assertEquals(expectedValue, calculatedValue);
    }
}
