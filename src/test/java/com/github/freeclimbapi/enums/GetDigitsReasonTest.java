/*
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.freeclimbapi;

import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.LocalDate;

import java.util.*;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.File;
import java.math.BigDecimal;
import java.net.URI;
import java.net.URISyntaxException;
import com.github.freeclimbapi.enums.*;
import com.github.freeclimbapi.models.*;

/**
 * Model tests for GetDigitsReason
 */
 public class GetDigitsReasonTest {
    
    
    
    @Test
    public void testFINISH_KEYShouldWork() {

        GetDigitsReason test = GetDigitsReason.FINISH_KEY;
         Assert.assertEquals(test.getClass(), GetDigitsReason.class);
    }

    @Test 
    public void testFINISH_KEYShouldSerializeToEnum() {
    
        GetDigitsReason expectedValue = GetDigitsReason.FINISH_KEY;
        GetDigitsReason calculatedValue = GetDigitsReason.fromValue("finishKey");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testFINISH_KEYShouldDeserializeToString() {
     GetDigitsReason test = GetDigitsReason.FINISH_KEY;
      String expectedValue = "finishKey";
      String calculatedValue = test.toString();
      Assert.assertEquals(expectedValue, calculatedValue);
    }
        @Test
    public void testTIMEOUTShouldWork() {

        GetDigitsReason test = GetDigitsReason.TIMEOUT;
         Assert.assertEquals(test.getClass(), GetDigitsReason.class);
    }

    @Test 
    public void testTIMEOUTShouldSerializeToEnum() {
    
        GetDigitsReason expectedValue = GetDigitsReason.TIMEOUT;
        GetDigitsReason calculatedValue = GetDigitsReason.fromValue("timeout");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testTIMEOUTShouldDeserializeToString() {
     GetDigitsReason test = GetDigitsReason.TIMEOUT;
      String expectedValue = "timeout";
      String calculatedValue = test.toString();
      Assert.assertEquals(expectedValue, calculatedValue);
    }
        @Test
    public void testMAX_DIGITSShouldWork() {

        GetDigitsReason test = GetDigitsReason.MAX_DIGITS;
         Assert.assertEquals(test.getClass(), GetDigitsReason.class);
    }

    @Test 
    public void testMAX_DIGITSShouldSerializeToEnum() {
    
        GetDigitsReason expectedValue = GetDigitsReason.MAX_DIGITS;
        GetDigitsReason calculatedValue = GetDigitsReason.fromValue("maxDigits");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testMAX_DIGITSShouldDeserializeToString() {
     GetDigitsReason test = GetDigitsReason.MAX_DIGITS;
      String expectedValue = "maxDigits";
      String calculatedValue = test.toString();
      Assert.assertEquals(expectedValue, calculatedValue);
    }
        @Test
    public void testTONEShouldWork() {

        GetDigitsReason test = GetDigitsReason.TONE;
         Assert.assertEquals(test.getClass(), GetDigitsReason.class);
    }

    @Test 
    public void testTONEShouldSerializeToEnum() {
    
        GetDigitsReason expectedValue = GetDigitsReason.TONE;
        GetDigitsReason calculatedValue = GetDigitsReason.fromValue("tone");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testTONEShouldDeserializeToString() {
     GetDigitsReason test = GetDigitsReason.TONE;
      String expectedValue = "tone";
      String calculatedValue = test.toString();
      Assert.assertEquals(expectedValue, calculatedValue);
    }
    
    
 }