/*
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.github.freeclimbapi;

import com.github.freeclimbapi.enums.*;
import com.github.freeclimbapi.models.*;
import java.util.*;
import org.junit.Assert;
import org.junit.Test;

/** Model tests for BargeInReason */
public class BargeInReasonTest {

    @Test
    public void testNO_BARGE_INShouldWork() {

        BargeInReason test = BargeInReason.NO_BARGE_IN;
        Assert.assertEquals(test.getClass(), BargeInReason.class);
    }

    @Test
    public void testNO_BARGE_INShouldSerializeToEnum() {

        BargeInReason expectedValue = BargeInReason.NO_BARGE_IN;
        BargeInReason calculatedValue = BargeInReason.fromValue("noBargeIn");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testNO_BARGE_INShouldDeserializeToString() {
        BargeInReason test = BargeInReason.NO_BARGE_IN;
        String expectedValue = "noBargeIn";
        String calculatedValue = test.toString();
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testBARGE_IN_BY_DTMFShouldWork() {

        BargeInReason test = BargeInReason.BARGE_IN_BY_DTMF;
        Assert.assertEquals(test.getClass(), BargeInReason.class);
    }

    @Test
    public void testBARGE_IN_BY_DTMFShouldSerializeToEnum() {

        BargeInReason expectedValue = BargeInReason.BARGE_IN_BY_DTMF;
        BargeInReason calculatedValue = BargeInReason.fromValue("bargeInByDTMF");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testBARGE_IN_BY_DTMFShouldDeserializeToString() {
        BargeInReason test = BargeInReason.BARGE_IN_BY_DTMF;
        String expectedValue = "bargeInByDTMF";
        String calculatedValue = test.toString();
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testBARGE_IN_BY_ENERGYShouldWork() {

        BargeInReason test = BargeInReason.BARGE_IN_BY_ENERGY;
        Assert.assertEquals(test.getClass(), BargeInReason.class);
    }

    @Test
    public void testBARGE_IN_BY_ENERGYShouldSerializeToEnum() {

        BargeInReason expectedValue = BargeInReason.BARGE_IN_BY_ENERGY;
        BargeInReason calculatedValue = BargeInReason.fromValue("bargeInByEnergy");
        Assert.assertEquals(expectedValue, calculatedValue);
    }

    @Test
    public void testBARGE_IN_BY_ENERGYShouldDeserializeToString() {
        BargeInReason test = BargeInReason.BARGE_IN_BY_ENERGY;
        String expectedValue = "bargeInByEnergy";
        String calculatedValue = test.toString();
        Assert.assertEquals(expectedValue, calculatedValue);
    }
}
